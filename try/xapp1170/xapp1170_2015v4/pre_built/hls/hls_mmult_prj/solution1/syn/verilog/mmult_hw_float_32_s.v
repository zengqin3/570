// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mmult_hw_float_32_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        b_address0,
        b_ce0,
        b_q0,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] a_address0;
output   a_ce0;
input  [31:0] a_q0;
output  [9:0] b_address0;
output   b_ce0;
input  [31:0] b_q0;
output  [9:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [31:0] out_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_ce0;
reg b_ce0;
reg out_r_ce0;
reg out_r_we0;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] ia_1_fu_132_p2;
reg   [5:0] ia_1_reg_227;
wire    ap_CS_fsm_state2;
wire   [11:0] tmp_6_cast_fu_146_p1;
reg   [11:0] tmp_6_cast_reg_232;
wire   [0:0] exitcond2_fu_126_p2;
wire   [5:0] ib_1_fu_156_p2;
reg   [5:0] ib_1_reg_241;
wire    ap_CS_fsm_state3;
wire   [11:0] tmp_2_cast_fu_162_p1;
reg   [11:0] tmp_2_cast_reg_246;
wire   [0:0] exitcond1_fu_150_p2;
reg   [9:0] out_addr_reg_251;
wire   [5:0] id_1_fu_182_p2;
reg   [5:0] id_1_reg_259;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond_fu_176_p2;
reg   [31:0] a_load_reg_274;
wire    ap_CS_fsm_state5;
reg   [31:0] b_load_reg_279;
wire   [31:0] grp_fu_122_p2;
reg   [31:0] tmp_5_reg_284;
wire    ap_CS_fsm_state9;
wire   [31:0] grp_fu_117_p2;
wire    ap_CS_fsm_state14;
reg   [5:0] ia_reg_71;
reg   [5:0] ib_reg_82;
reg   [31:0] sum_reg_93;
reg   [5:0] id_reg_106;
wire   [63:0] tmp_7_cast_fu_171_p1;
wire   [63:0] tmp_8_cast_fu_197_p1;
wire   [63:0] tmp_11_cast_fu_219_p1;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state6;
wire   [10:0] tmp_fu_138_p3;
wire   [11:0] tmp_7_fu_166_p2;
wire   [11:0] tmp_4_cast_fu_188_p1;
wire   [11:0] tmp_8_fu_192_p2;
wire   [10:0] tmp_9_fu_202_p3;
wire   [11:0] tmp_10_cast_fu_210_p1;
wire   [11:0] tmp_s_fu_214_p2;
reg   [13:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
end

standalone_mmult_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
standalone_mmult_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_reg_93),
    .din1(tmp_5_reg_284),
    .ce(1'b1),
    .dout(grp_fu_117_p2)
);

standalone_mmult_cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
standalone_mmult_cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_load_reg_274),
    .din1(b_load_reg_279),
    .ce(1'b1),
    .dout(grp_fu_122_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_150_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ia_reg_71 <= ia_1_reg_227;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ia_reg_71 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_176_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ib_reg_82 <= ib_1_reg_241;
    end else if (((exitcond2_fu_126_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ib_reg_82 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        id_reg_106 <= id_1_reg_259;
    end else if (((exitcond1_fu_150_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        id_reg_106 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        sum_reg_93 <= grp_fu_117_p2;
    end else if (((exitcond1_fu_150_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        sum_reg_93 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        a_load_reg_274 <= a_q0;
        b_load_reg_279 <= b_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ia_1_reg_227 <= ia_1_fu_132_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ib_1_reg_241 <= ib_1_fu_156_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        id_1_reg_259 <= id_1_fu_182_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_150_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        out_addr_reg_251 <= tmp_7_cast_fu_171_p1;
        tmp_2_cast_reg_246[5 : 0] <= tmp_2_cast_fu_162_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_5_reg_284 <= grp_fu_122_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_126_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_6_cast_reg_232[10 : 5] <= tmp_6_cast_fu_146_p1[10 : 5];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond2_fu_126_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_fu_126_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_176_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond2_fu_126_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond1_fu_150_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond_fu_176_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = tmp_8_cast_fu_197_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign b_address0 = tmp_11_cast_fu_219_p1;

assign exitcond1_fu_150_p2 = ((ib_reg_82 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond2_fu_126_p2 = ((ia_reg_71 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond_fu_176_p2 = ((id_reg_106 == 6'd32) ? 1'b1 : 1'b0);

assign ia_1_fu_132_p2 = (ia_reg_71 + 6'd1);

assign ib_1_fu_156_p2 = (ib_reg_82 + 6'd1);

assign id_1_fu_182_p2 = (id_reg_106 + 6'd1);

assign out_r_address0 = out_addr_reg_251;

assign out_r_d0 = sum_reg_93;

assign tmp_10_cast_fu_210_p1 = tmp_9_fu_202_p3;

assign tmp_11_cast_fu_219_p1 = tmp_s_fu_214_p2;

assign tmp_2_cast_fu_162_p1 = ib_reg_82;

assign tmp_4_cast_fu_188_p1 = id_reg_106;

assign tmp_6_cast_fu_146_p1 = tmp_fu_138_p3;

assign tmp_7_cast_fu_171_p1 = tmp_7_fu_166_p2;

assign tmp_7_fu_166_p2 = (tmp_6_cast_reg_232 + tmp_2_cast_fu_162_p1);

assign tmp_8_cast_fu_197_p1 = tmp_8_fu_192_p2;

assign tmp_8_fu_192_p2 = (tmp_4_cast_fu_188_p1 + tmp_6_cast_reg_232);

assign tmp_9_fu_202_p3 = {{id_reg_106}, {5'd0}};

assign tmp_fu_138_p3 = {{ia_reg_71}, {5'd0}};

assign tmp_s_fu_214_p2 = (tmp_2_cast_reg_246 + tmp_10_cast_fu_210_p1);

always @ (posedge ap_clk) begin
    tmp_6_cast_reg_232[4:0] <= 5'b00000;
    tmp_6_cast_reg_232[11] <= 1'b0;
    tmp_2_cast_reg_246[11:6] <= 6'b000000;
end

endmodule //mmult_hw_float_32_s
