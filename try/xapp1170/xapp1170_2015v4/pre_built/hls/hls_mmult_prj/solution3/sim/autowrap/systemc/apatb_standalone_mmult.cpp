// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// ==============================================================

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <complex>
#include <stdbool.h>
#include "autopilot_cbe.h"
#include "ap_stream.h"
#include "hls_stream.h"
#include "hls_half.h"
#include "hls_signal_handler.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->


// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "A_0"
#define AUTOTB_TVIN_A_0  "../tv/cdatafile/c.standalone_mmult.autotvin_A_0.dat"
// wrapc file define: "A_1"
#define AUTOTB_TVIN_A_1  "../tv/cdatafile/c.standalone_mmult.autotvin_A_1.dat"
// wrapc file define: "A_2"
#define AUTOTB_TVIN_A_2  "../tv/cdatafile/c.standalone_mmult.autotvin_A_2.dat"
// wrapc file define: "A_3"
#define AUTOTB_TVIN_A_3  "../tv/cdatafile/c.standalone_mmult.autotvin_A_3.dat"
// wrapc file define: "A_4"
#define AUTOTB_TVIN_A_4  "../tv/cdatafile/c.standalone_mmult.autotvin_A_4.dat"
// wrapc file define: "A_5"
#define AUTOTB_TVIN_A_5  "../tv/cdatafile/c.standalone_mmult.autotvin_A_5.dat"
// wrapc file define: "A_6"
#define AUTOTB_TVIN_A_6  "../tv/cdatafile/c.standalone_mmult.autotvin_A_6.dat"
// wrapc file define: "A_7"
#define AUTOTB_TVIN_A_7  "../tv/cdatafile/c.standalone_mmult.autotvin_A_7.dat"
// wrapc file define: "A_8"
#define AUTOTB_TVIN_A_8  "../tv/cdatafile/c.standalone_mmult.autotvin_A_8.dat"
// wrapc file define: "A_9"
#define AUTOTB_TVIN_A_9  "../tv/cdatafile/c.standalone_mmult.autotvin_A_9.dat"
// wrapc file define: "A_10"
#define AUTOTB_TVIN_A_10  "../tv/cdatafile/c.standalone_mmult.autotvin_A_10.dat"
// wrapc file define: "A_11"
#define AUTOTB_TVIN_A_11  "../tv/cdatafile/c.standalone_mmult.autotvin_A_11.dat"
// wrapc file define: "A_12"
#define AUTOTB_TVIN_A_12  "../tv/cdatafile/c.standalone_mmult.autotvin_A_12.dat"
// wrapc file define: "A_13"
#define AUTOTB_TVIN_A_13  "../tv/cdatafile/c.standalone_mmult.autotvin_A_13.dat"
// wrapc file define: "A_14"
#define AUTOTB_TVIN_A_14  "../tv/cdatafile/c.standalone_mmult.autotvin_A_14.dat"
// wrapc file define: "A_15"
#define AUTOTB_TVIN_A_15  "../tv/cdatafile/c.standalone_mmult.autotvin_A_15.dat"
// wrapc file define: "B_0"
#define AUTOTB_TVIN_B_0  "../tv/cdatafile/c.standalone_mmult.autotvin_B_0.dat"
// wrapc file define: "B_1"
#define AUTOTB_TVIN_B_1  "../tv/cdatafile/c.standalone_mmult.autotvin_B_1.dat"
// wrapc file define: "B_2"
#define AUTOTB_TVIN_B_2  "../tv/cdatafile/c.standalone_mmult.autotvin_B_2.dat"
// wrapc file define: "B_3"
#define AUTOTB_TVIN_B_3  "../tv/cdatafile/c.standalone_mmult.autotvin_B_3.dat"
// wrapc file define: "B_4"
#define AUTOTB_TVIN_B_4  "../tv/cdatafile/c.standalone_mmult.autotvin_B_4.dat"
// wrapc file define: "B_5"
#define AUTOTB_TVIN_B_5  "../tv/cdatafile/c.standalone_mmult.autotvin_B_5.dat"
// wrapc file define: "B_6"
#define AUTOTB_TVIN_B_6  "../tv/cdatafile/c.standalone_mmult.autotvin_B_6.dat"
// wrapc file define: "B_7"
#define AUTOTB_TVIN_B_7  "../tv/cdatafile/c.standalone_mmult.autotvin_B_7.dat"
// wrapc file define: "B_8"
#define AUTOTB_TVIN_B_8  "../tv/cdatafile/c.standalone_mmult.autotvin_B_8.dat"
// wrapc file define: "B_9"
#define AUTOTB_TVIN_B_9  "../tv/cdatafile/c.standalone_mmult.autotvin_B_9.dat"
// wrapc file define: "B_10"
#define AUTOTB_TVIN_B_10  "../tv/cdatafile/c.standalone_mmult.autotvin_B_10.dat"
// wrapc file define: "B_11"
#define AUTOTB_TVIN_B_11  "../tv/cdatafile/c.standalone_mmult.autotvin_B_11.dat"
// wrapc file define: "B_12"
#define AUTOTB_TVIN_B_12  "../tv/cdatafile/c.standalone_mmult.autotvin_B_12.dat"
// wrapc file define: "B_13"
#define AUTOTB_TVIN_B_13  "../tv/cdatafile/c.standalone_mmult.autotvin_B_13.dat"
// wrapc file define: "B_14"
#define AUTOTB_TVIN_B_14  "../tv/cdatafile/c.standalone_mmult.autotvin_B_14.dat"
// wrapc file define: "B_15"
#define AUTOTB_TVIN_B_15  "../tv/cdatafile/c.standalone_mmult.autotvin_B_15.dat"
// wrapc file define: "C"
#define AUTOTB_TVOUT_C  "../tv/cdatafile/c.standalone_mmult.autotvout_C.dat"
#define AUTOTB_TVIN_C  "../tv/cdatafile/c.standalone_mmult.autotvin_C.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "C"
#define AUTOTB_TVOUT_PC_C  "../tv/rtldatafile/rtl.standalone_mmult.autotvout_C.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			A_0_depth = 0;
			A_1_depth = 0;
			A_2_depth = 0;
			A_3_depth = 0;
			A_4_depth = 0;
			A_5_depth = 0;
			A_6_depth = 0;
			A_7_depth = 0;
			A_8_depth = 0;
			A_9_depth = 0;
			A_10_depth = 0;
			A_11_depth = 0;
			A_12_depth = 0;
			A_13_depth = 0;
			A_14_depth = 0;
			A_15_depth = 0;
			B_0_depth = 0;
			B_1_depth = 0;
			B_2_depth = 0;
			B_3_depth = 0;
			B_4_depth = 0;
			B_5_depth = 0;
			B_6_depth = 0;
			B_7_depth = 0;
			B_8_depth = 0;
			B_9_depth = 0;
			B_10_depth = 0;
			B_11_depth = 0;
			B_12_depth = 0;
			B_13_depth = 0;
			B_14_depth = 0;
			B_15_depth = 0;
			C_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{A_0 " << A_0_depth << "}\n";
			total_list << "{A_1 " << A_1_depth << "}\n";
			total_list << "{A_2 " << A_2_depth << "}\n";
			total_list << "{A_3 " << A_3_depth << "}\n";
			total_list << "{A_4 " << A_4_depth << "}\n";
			total_list << "{A_5 " << A_5_depth << "}\n";
			total_list << "{A_6 " << A_6_depth << "}\n";
			total_list << "{A_7 " << A_7_depth << "}\n";
			total_list << "{A_8 " << A_8_depth << "}\n";
			total_list << "{A_9 " << A_9_depth << "}\n";
			total_list << "{A_10 " << A_10_depth << "}\n";
			total_list << "{A_11 " << A_11_depth << "}\n";
			total_list << "{A_12 " << A_12_depth << "}\n";
			total_list << "{A_13 " << A_13_depth << "}\n";
			total_list << "{A_14 " << A_14_depth << "}\n";
			total_list << "{A_15 " << A_15_depth << "}\n";
			total_list << "{B_0 " << B_0_depth << "}\n";
			total_list << "{B_1 " << B_1_depth << "}\n";
			total_list << "{B_2 " << B_2_depth << "}\n";
			total_list << "{B_3 " << B_3_depth << "}\n";
			total_list << "{B_4 " << B_4_depth << "}\n";
			total_list << "{B_5 " << B_5_depth << "}\n";
			total_list << "{B_6 " << B_6_depth << "}\n";
			total_list << "{B_7 " << B_7_depth << "}\n";
			total_list << "{B_8 " << B_8_depth << "}\n";
			total_list << "{B_9 " << B_9_depth << "}\n";
			total_list << "{B_10 " << B_10_depth << "}\n";
			total_list << "{B_11 " << B_11_depth << "}\n";
			total_list << "{B_12 " << B_12_depth << "}\n";
			total_list << "{B_13 " << B_13_depth << "}\n";
			total_list << "{B_14 " << B_14_depth << "}\n";
			total_list << "{B_15 " << B_15_depth << "}\n";
			total_list << "{C " << C_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int A_0_depth;
		int A_1_depth;
		int A_2_depth;
		int A_3_depth;
		int A_4_depth;
		int A_5_depth;
		int A_6_depth;
		int A_7_depth;
		int A_8_depth;
		int A_9_depth;
		int A_10_depth;
		int A_11_depth;
		int A_12_depth;
		int A_13_depth;
		int A_14_depth;
		int A_15_depth;
		int B_0_depth;
		int B_1_depth;
		int B_2_depth;
		int B_3_depth;
		int B_4_depth;
		int B_5_depth;
		int B_6_depth;
		int B_7_depth;
		int B_8_depth;
		int B_9_depth;
		int B_10_depth;
		int B_11_depth;
		int B_12_depth;
		int B_13_depth;
		int B_14_depth;
		int B_15_depth;
		int C_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};

extern void standalone_mmult (
float A[32][32],
float B[32][32],
float C[32][32]);

void AESL_WRAP_standalone_mmult (
float A[32][32],
float B[32][32],
float C[32][32])
{
	refine_signal_handler();
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		CodeState = ENTER_WRAPC_PC;
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;


		// output port post check: "C"
		aesl_fh.read(AUTOTB_TVOUT_PC_C, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_C, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_C, AESL_token); // data

			sc_bv<32> *C_pc_buffer = new sc_bv<32>[1024];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'C', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'C', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					C_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_C, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_C))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: C
				{
					// bitslice(31, 0)
					// {
						// celement: C(31, 0)
						// {
							sc_lv<32>* C_lv0_0_31_1_lv1_0_31_1 = new sc_lv<32>[1024];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: C(31, 0)
						{
							// carray: (0) => (31) @ (1)
							for (int i_0 = 0; i_0 <= 31; i_0 += 1)
							{
								// carray: (0) => (31) @ (1)
								for (int i_1 = 0; i_1 <= 31; i_1 += 1)
								{
									if (&(C[0][0]) != NULL) // check the null address if the c port is array or others
									{
										C_lv0_0_31_1_lv1_0_31_1[hls_map_index].range(31, 0) = sc_bv<32>(C_pc_buffer[hls_map_index].range(31, 0));
										hls_map_index++;
									}
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: C(31, 0)
						{
							// carray: (0) => (31) @ (1)
							for (int i_0 = 0; i_0 <= 31; i_0 += 1)
							{
								// carray: (0) => (31) @ (1)
								for (int i_1 = 0; i_1 <= 31; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : C[i_0][i_1]
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : C[0][0]
									// output_left_conversion : *(int*)&C[i_0][i_1]
									// output_type_conversion : (C_lv0_0_31_1_lv1_0_31_1[hls_map_index]).to_uint64()
									if (&(C[0][0]) != NULL) // check the null address if the c port is array or others
									{
										*(int*)&C[i_0][i_1] = (C_lv0_0_31_1_lv1_0_31_1[hls_map_index]).to_uint64();
										hls_map_index++;
									}
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] C_pc_buffer;
		}

		AESL_transaction_pc++;
	}
	else
	{
		CodeState = ENTER_WRAPC;
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "A_0"
		char* tvin_A_0 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_A_0);

		// "A_1"
		char* tvin_A_1 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_A_1);

		// "A_2"
		char* tvin_A_2 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_A_2);

		// "A_3"
		char* tvin_A_3 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_A_3);

		// "A_4"
		char* tvin_A_4 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_A_4);

		// "A_5"
		char* tvin_A_5 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_A_5);

		// "A_6"
		char* tvin_A_6 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_A_6);

		// "A_7"
		char* tvin_A_7 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_A_7);

		// "A_8"
		char* tvin_A_8 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_A_8);

		// "A_9"
		char* tvin_A_9 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_A_9);

		// "A_10"
		char* tvin_A_10 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_A_10);

		// "A_11"
		char* tvin_A_11 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_A_11);

		// "A_12"
		char* tvin_A_12 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_A_12);

		// "A_13"
		char* tvin_A_13 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_A_13);

		// "A_14"
		char* tvin_A_14 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_A_14);

		// "A_15"
		char* tvin_A_15 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_A_15);

		// "B_0"
		char* tvin_B_0 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_B_0);

		// "B_1"
		char* tvin_B_1 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_B_1);

		// "B_2"
		char* tvin_B_2 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_B_2);

		// "B_3"
		char* tvin_B_3 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_B_3);

		// "B_4"
		char* tvin_B_4 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_B_4);

		// "B_5"
		char* tvin_B_5 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_B_5);

		// "B_6"
		char* tvin_B_6 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_B_6);

		// "B_7"
		char* tvin_B_7 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_B_7);

		// "B_8"
		char* tvin_B_8 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_B_8);

		// "B_9"
		char* tvin_B_9 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_B_9);

		// "B_10"
		char* tvin_B_10 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_B_10);

		// "B_11"
		char* tvin_B_11 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_B_11);

		// "B_12"
		char* tvin_B_12 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_B_12);

		// "B_13"
		char* tvin_B_13 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_B_13);

		// "B_14"
		char* tvin_B_14 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_B_14);

		// "B_15"
		char* tvin_B_15 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_B_15);

		// "C"
		char* tvin_C = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_C);
		char* tvout_C = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_C);

		CodeState = DUMP_INPUTS;
		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// [[transaction]]
		sprintf(tvin_A_0, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_A_0, tvin_A_0);

		sc_bv<32>* A_0_tvin_wrapc_buffer = new sc_bv<32>[64];

		// RTL Name: A_0
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: A(31, 0)
				{
					// carray: (0) => (31) @ (1)
					for (int i_0 = 0; i_0 <= 31; i_0 += 1)
					{
						// carray: (0) => (1) @ (1)
						for (int i_1 = 0; i_1 <= 1; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : A[i_0][i_1]
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : A[0][0]
							// regulate_c_name       : A
							// input_type_conversion : *(int*)&A[i_0][i_1]
							if (&(A[0][0]) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> A_tmp_mem;
								A_tmp_mem = *(int*)&A[i_0][i_1];
								A_0_tvin_wrapc_buffer[hls_map_index].range(31, 0) = A_tmp_mem.range(31, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 64; i++)
		{
			sprintf(tvin_A_0, "%s\n", (A_0_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_A_0, tvin_A_0);
		}

		tcl_file.set_num(64, &tcl_file.A_0_depth);
		sprintf(tvin_A_0, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_A_0, tvin_A_0);

		// release memory allocation
		delete [] A_0_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_A_1, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_A_1, tvin_A_1);

		sc_bv<32>* A_1_tvin_wrapc_buffer = new sc_bv<32>[64];

		// RTL Name: A_1
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: A(31, 0)
				{
					// carray: (0) => (31) @ (1)
					for (int i_0 = 0; i_0 <= 31; i_0 += 1)
					{
						// carray: (2) => (3) @ (1)
						for (int i_1 = 2; i_1 <= 3; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : A[i_0][i_1]
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : A[0][0]
							// regulate_c_name       : A
							// input_type_conversion : *(int*)&A[i_0][i_1]
							if (&(A[0][0]) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> A_tmp_mem;
								A_tmp_mem = *(int*)&A[i_0][i_1];
								A_1_tvin_wrapc_buffer[hls_map_index].range(31, 0) = A_tmp_mem.range(31, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 64; i++)
		{
			sprintf(tvin_A_1, "%s\n", (A_1_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_A_1, tvin_A_1);
		}

		tcl_file.set_num(64, &tcl_file.A_1_depth);
		sprintf(tvin_A_1, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_A_1, tvin_A_1);

		// release memory allocation
		delete [] A_1_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_A_2, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_A_2, tvin_A_2);

		sc_bv<32>* A_2_tvin_wrapc_buffer = new sc_bv<32>[64];

		// RTL Name: A_2
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: A(31, 0)
				{
					// carray: (0) => (31) @ (1)
					for (int i_0 = 0; i_0 <= 31; i_0 += 1)
					{
						// carray: (4) => (5) @ (1)
						for (int i_1 = 4; i_1 <= 5; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : A[i_0][i_1]
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : A[0][0]
							// regulate_c_name       : A
							// input_type_conversion : *(int*)&A[i_0][i_1]
							if (&(A[0][0]) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> A_tmp_mem;
								A_tmp_mem = *(int*)&A[i_0][i_1];
								A_2_tvin_wrapc_buffer[hls_map_index].range(31, 0) = A_tmp_mem.range(31, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 64; i++)
		{
			sprintf(tvin_A_2, "%s\n", (A_2_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_A_2, tvin_A_2);
		}

		tcl_file.set_num(64, &tcl_file.A_2_depth);
		sprintf(tvin_A_2, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_A_2, tvin_A_2);

		// release memory allocation
		delete [] A_2_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_A_3, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_A_3, tvin_A_3);

		sc_bv<32>* A_3_tvin_wrapc_buffer = new sc_bv<32>[64];

		// RTL Name: A_3
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: A(31, 0)
				{
					// carray: (0) => (31) @ (1)
					for (int i_0 = 0; i_0 <= 31; i_0 += 1)
					{
						// carray: (6) => (7) @ (1)
						for (int i_1 = 6; i_1 <= 7; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : A[i_0][i_1]
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : A[0][0]
							// regulate_c_name       : A
							// input_type_conversion : *(int*)&A[i_0][i_1]
							if (&(A[0][0]) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> A_tmp_mem;
								A_tmp_mem = *(int*)&A[i_0][i_1];
								A_3_tvin_wrapc_buffer[hls_map_index].range(31, 0) = A_tmp_mem.range(31, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 64; i++)
		{
			sprintf(tvin_A_3, "%s\n", (A_3_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_A_3, tvin_A_3);
		}

		tcl_file.set_num(64, &tcl_file.A_3_depth);
		sprintf(tvin_A_3, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_A_3, tvin_A_3);

		// release memory allocation
		delete [] A_3_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_A_4, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_A_4, tvin_A_4);

		sc_bv<32>* A_4_tvin_wrapc_buffer = new sc_bv<32>[64];

		// RTL Name: A_4
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: A(31, 0)
				{
					// carray: (0) => (31) @ (1)
					for (int i_0 = 0; i_0 <= 31; i_0 += 1)
					{
						// carray: (8) => (9) @ (1)
						for (int i_1 = 8; i_1 <= 9; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : A[i_0][i_1]
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : A[0][0]
							// regulate_c_name       : A
							// input_type_conversion : *(int*)&A[i_0][i_1]
							if (&(A[0][0]) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> A_tmp_mem;
								A_tmp_mem = *(int*)&A[i_0][i_1];
								A_4_tvin_wrapc_buffer[hls_map_index].range(31, 0) = A_tmp_mem.range(31, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 64; i++)
		{
			sprintf(tvin_A_4, "%s\n", (A_4_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_A_4, tvin_A_4);
		}

		tcl_file.set_num(64, &tcl_file.A_4_depth);
		sprintf(tvin_A_4, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_A_4, tvin_A_4);

		// release memory allocation
		delete [] A_4_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_A_5, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_A_5, tvin_A_5);

		sc_bv<32>* A_5_tvin_wrapc_buffer = new sc_bv<32>[64];

		// RTL Name: A_5
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: A(31, 0)
				{
					// carray: (0) => (31) @ (1)
					for (int i_0 = 0; i_0 <= 31; i_0 += 1)
					{
						// carray: (10) => (11) @ (1)
						for (int i_1 = 10; i_1 <= 11; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : A[i_0][i_1]
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : A[0][0]
							// regulate_c_name       : A
							// input_type_conversion : *(int*)&A[i_0][i_1]
							if (&(A[0][0]) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> A_tmp_mem;
								A_tmp_mem = *(int*)&A[i_0][i_1];
								A_5_tvin_wrapc_buffer[hls_map_index].range(31, 0) = A_tmp_mem.range(31, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 64; i++)
		{
			sprintf(tvin_A_5, "%s\n", (A_5_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_A_5, tvin_A_5);
		}

		tcl_file.set_num(64, &tcl_file.A_5_depth);
		sprintf(tvin_A_5, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_A_5, tvin_A_5);

		// release memory allocation
		delete [] A_5_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_A_6, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_A_6, tvin_A_6);

		sc_bv<32>* A_6_tvin_wrapc_buffer = new sc_bv<32>[64];

		// RTL Name: A_6
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: A(31, 0)
				{
					// carray: (0) => (31) @ (1)
					for (int i_0 = 0; i_0 <= 31; i_0 += 1)
					{
						// carray: (12) => (13) @ (1)
						for (int i_1 = 12; i_1 <= 13; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : A[i_0][i_1]
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : A[0][0]
							// regulate_c_name       : A
							// input_type_conversion : *(int*)&A[i_0][i_1]
							if (&(A[0][0]) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> A_tmp_mem;
								A_tmp_mem = *(int*)&A[i_0][i_1];
								A_6_tvin_wrapc_buffer[hls_map_index].range(31, 0) = A_tmp_mem.range(31, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 64; i++)
		{
			sprintf(tvin_A_6, "%s\n", (A_6_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_A_6, tvin_A_6);
		}

		tcl_file.set_num(64, &tcl_file.A_6_depth);
		sprintf(tvin_A_6, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_A_6, tvin_A_6);

		// release memory allocation
		delete [] A_6_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_A_7, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_A_7, tvin_A_7);

		sc_bv<32>* A_7_tvin_wrapc_buffer = new sc_bv<32>[64];

		// RTL Name: A_7
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: A(31, 0)
				{
					// carray: (0) => (31) @ (1)
					for (int i_0 = 0; i_0 <= 31; i_0 += 1)
					{
						// carray: (14) => (15) @ (1)
						for (int i_1 = 14; i_1 <= 15; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : A[i_0][i_1]
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : A[0][0]
							// regulate_c_name       : A
							// input_type_conversion : *(int*)&A[i_0][i_1]
							if (&(A[0][0]) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> A_tmp_mem;
								A_tmp_mem = *(int*)&A[i_0][i_1];
								A_7_tvin_wrapc_buffer[hls_map_index].range(31, 0) = A_tmp_mem.range(31, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 64; i++)
		{
			sprintf(tvin_A_7, "%s\n", (A_7_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_A_7, tvin_A_7);
		}

		tcl_file.set_num(64, &tcl_file.A_7_depth);
		sprintf(tvin_A_7, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_A_7, tvin_A_7);

		// release memory allocation
		delete [] A_7_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_A_8, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_A_8, tvin_A_8);

		sc_bv<32>* A_8_tvin_wrapc_buffer = new sc_bv<32>[64];

		// RTL Name: A_8
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: A(31, 0)
				{
					// carray: (0) => (31) @ (1)
					for (int i_0 = 0; i_0 <= 31; i_0 += 1)
					{
						// carray: (16) => (17) @ (1)
						for (int i_1 = 16; i_1 <= 17; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : A[i_0][i_1]
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : A[0][0]
							// regulate_c_name       : A
							// input_type_conversion : *(int*)&A[i_0][i_1]
							if (&(A[0][0]) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> A_tmp_mem;
								A_tmp_mem = *(int*)&A[i_0][i_1];
								A_8_tvin_wrapc_buffer[hls_map_index].range(31, 0) = A_tmp_mem.range(31, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 64; i++)
		{
			sprintf(tvin_A_8, "%s\n", (A_8_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_A_8, tvin_A_8);
		}

		tcl_file.set_num(64, &tcl_file.A_8_depth);
		sprintf(tvin_A_8, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_A_8, tvin_A_8);

		// release memory allocation
		delete [] A_8_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_A_9, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_A_9, tvin_A_9);

		sc_bv<32>* A_9_tvin_wrapc_buffer = new sc_bv<32>[64];

		// RTL Name: A_9
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: A(31, 0)
				{
					// carray: (0) => (31) @ (1)
					for (int i_0 = 0; i_0 <= 31; i_0 += 1)
					{
						// carray: (18) => (19) @ (1)
						for (int i_1 = 18; i_1 <= 19; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : A[i_0][i_1]
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : A[0][0]
							// regulate_c_name       : A
							// input_type_conversion : *(int*)&A[i_0][i_1]
							if (&(A[0][0]) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> A_tmp_mem;
								A_tmp_mem = *(int*)&A[i_0][i_1];
								A_9_tvin_wrapc_buffer[hls_map_index].range(31, 0) = A_tmp_mem.range(31, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 64; i++)
		{
			sprintf(tvin_A_9, "%s\n", (A_9_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_A_9, tvin_A_9);
		}

		tcl_file.set_num(64, &tcl_file.A_9_depth);
		sprintf(tvin_A_9, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_A_9, tvin_A_9);

		// release memory allocation
		delete [] A_9_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_A_10, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_A_10, tvin_A_10);

		sc_bv<32>* A_10_tvin_wrapc_buffer = new sc_bv<32>[64];

		// RTL Name: A_10
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: A(31, 0)
				{
					// carray: (0) => (31) @ (1)
					for (int i_0 = 0; i_0 <= 31; i_0 += 1)
					{
						// carray: (20) => (21) @ (1)
						for (int i_1 = 20; i_1 <= 21; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : A[i_0][i_1]
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : A[0][0]
							// regulate_c_name       : A
							// input_type_conversion : *(int*)&A[i_0][i_1]
							if (&(A[0][0]) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> A_tmp_mem;
								A_tmp_mem = *(int*)&A[i_0][i_1];
								A_10_tvin_wrapc_buffer[hls_map_index].range(31, 0) = A_tmp_mem.range(31, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 64; i++)
		{
			sprintf(tvin_A_10, "%s\n", (A_10_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_A_10, tvin_A_10);
		}

		tcl_file.set_num(64, &tcl_file.A_10_depth);
		sprintf(tvin_A_10, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_A_10, tvin_A_10);

		// release memory allocation
		delete [] A_10_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_A_11, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_A_11, tvin_A_11);

		sc_bv<32>* A_11_tvin_wrapc_buffer = new sc_bv<32>[64];

		// RTL Name: A_11
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: A(31, 0)
				{
					// carray: (0) => (31) @ (1)
					for (int i_0 = 0; i_0 <= 31; i_0 += 1)
					{
						// carray: (22) => (23) @ (1)
						for (int i_1 = 22; i_1 <= 23; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : A[i_0][i_1]
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : A[0][0]
							// regulate_c_name       : A
							// input_type_conversion : *(int*)&A[i_0][i_1]
							if (&(A[0][0]) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> A_tmp_mem;
								A_tmp_mem = *(int*)&A[i_0][i_1];
								A_11_tvin_wrapc_buffer[hls_map_index].range(31, 0) = A_tmp_mem.range(31, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 64; i++)
		{
			sprintf(tvin_A_11, "%s\n", (A_11_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_A_11, tvin_A_11);
		}

		tcl_file.set_num(64, &tcl_file.A_11_depth);
		sprintf(tvin_A_11, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_A_11, tvin_A_11);

		// release memory allocation
		delete [] A_11_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_A_12, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_A_12, tvin_A_12);

		sc_bv<32>* A_12_tvin_wrapc_buffer = new sc_bv<32>[64];

		// RTL Name: A_12
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: A(31, 0)
				{
					// carray: (0) => (31) @ (1)
					for (int i_0 = 0; i_0 <= 31; i_0 += 1)
					{
						// carray: (24) => (25) @ (1)
						for (int i_1 = 24; i_1 <= 25; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : A[i_0][i_1]
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : A[0][0]
							// regulate_c_name       : A
							// input_type_conversion : *(int*)&A[i_0][i_1]
							if (&(A[0][0]) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> A_tmp_mem;
								A_tmp_mem = *(int*)&A[i_0][i_1];
								A_12_tvin_wrapc_buffer[hls_map_index].range(31, 0) = A_tmp_mem.range(31, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 64; i++)
		{
			sprintf(tvin_A_12, "%s\n", (A_12_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_A_12, tvin_A_12);
		}

		tcl_file.set_num(64, &tcl_file.A_12_depth);
		sprintf(tvin_A_12, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_A_12, tvin_A_12);

		// release memory allocation
		delete [] A_12_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_A_13, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_A_13, tvin_A_13);

		sc_bv<32>* A_13_tvin_wrapc_buffer = new sc_bv<32>[64];

		// RTL Name: A_13
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: A(31, 0)
				{
					// carray: (0) => (31) @ (1)
					for (int i_0 = 0; i_0 <= 31; i_0 += 1)
					{
						// carray: (26) => (27) @ (1)
						for (int i_1 = 26; i_1 <= 27; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : A[i_0][i_1]
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : A[0][0]
							// regulate_c_name       : A
							// input_type_conversion : *(int*)&A[i_0][i_1]
							if (&(A[0][0]) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> A_tmp_mem;
								A_tmp_mem = *(int*)&A[i_0][i_1];
								A_13_tvin_wrapc_buffer[hls_map_index].range(31, 0) = A_tmp_mem.range(31, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 64; i++)
		{
			sprintf(tvin_A_13, "%s\n", (A_13_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_A_13, tvin_A_13);
		}

		tcl_file.set_num(64, &tcl_file.A_13_depth);
		sprintf(tvin_A_13, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_A_13, tvin_A_13);

		// release memory allocation
		delete [] A_13_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_A_14, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_A_14, tvin_A_14);

		sc_bv<32>* A_14_tvin_wrapc_buffer = new sc_bv<32>[64];

		// RTL Name: A_14
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: A(31, 0)
				{
					// carray: (0) => (31) @ (1)
					for (int i_0 = 0; i_0 <= 31; i_0 += 1)
					{
						// carray: (28) => (29) @ (1)
						for (int i_1 = 28; i_1 <= 29; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : A[i_0][i_1]
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : A[0][0]
							// regulate_c_name       : A
							// input_type_conversion : *(int*)&A[i_0][i_1]
							if (&(A[0][0]) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> A_tmp_mem;
								A_tmp_mem = *(int*)&A[i_0][i_1];
								A_14_tvin_wrapc_buffer[hls_map_index].range(31, 0) = A_tmp_mem.range(31, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 64; i++)
		{
			sprintf(tvin_A_14, "%s\n", (A_14_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_A_14, tvin_A_14);
		}

		tcl_file.set_num(64, &tcl_file.A_14_depth);
		sprintf(tvin_A_14, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_A_14, tvin_A_14);

		// release memory allocation
		delete [] A_14_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_A_15, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_A_15, tvin_A_15);

		sc_bv<32>* A_15_tvin_wrapc_buffer = new sc_bv<32>[64];

		// RTL Name: A_15
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: A(31, 0)
				{
					// carray: (0) => (31) @ (1)
					for (int i_0 = 0; i_0 <= 31; i_0 += 1)
					{
						// carray: (30) => (31) @ (1)
						for (int i_1 = 30; i_1 <= 31; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : A[i_0][i_1]
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : A[0][0]
							// regulate_c_name       : A
							// input_type_conversion : *(int*)&A[i_0][i_1]
							if (&(A[0][0]) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> A_tmp_mem;
								A_tmp_mem = *(int*)&A[i_0][i_1];
								A_15_tvin_wrapc_buffer[hls_map_index].range(31, 0) = A_tmp_mem.range(31, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 64; i++)
		{
			sprintf(tvin_A_15, "%s\n", (A_15_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_A_15, tvin_A_15);
		}

		tcl_file.set_num(64, &tcl_file.A_15_depth);
		sprintf(tvin_A_15, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_A_15, tvin_A_15);

		// release memory allocation
		delete [] A_15_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_B_0, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_B_0, tvin_B_0);

		sc_bv<32>* B_0_tvin_wrapc_buffer = new sc_bv<32>[64];

		// RTL Name: B_0
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: B(31, 0)
				{
					// carray: (0) => (1) @ (1)
					for (int i_0 = 0; i_0 <= 1; i_0 += 1)
					{
						// carray: (0) => (31) @ (1)
						for (int i_1 = 0; i_1 <= 31; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : B[i_0][i_1]
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : B[0][0]
							// regulate_c_name       : B
							// input_type_conversion : *(int*)&B[i_0][i_1]
							if (&(B[0][0]) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> B_tmp_mem;
								B_tmp_mem = *(int*)&B[i_0][i_1];
								B_0_tvin_wrapc_buffer[hls_map_index].range(31, 0) = B_tmp_mem.range(31, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 64; i++)
		{
			sprintf(tvin_B_0, "%s\n", (B_0_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_B_0, tvin_B_0);
		}

		tcl_file.set_num(64, &tcl_file.B_0_depth);
		sprintf(tvin_B_0, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_B_0, tvin_B_0);

		// release memory allocation
		delete [] B_0_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_B_1, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_B_1, tvin_B_1);

		sc_bv<32>* B_1_tvin_wrapc_buffer = new sc_bv<32>[64];

		// RTL Name: B_1
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: B(31, 0)
				{
					// carray: (2) => (3) @ (1)
					for (int i_0 = 2; i_0 <= 3; i_0 += 1)
					{
						// carray: (0) => (31) @ (1)
						for (int i_1 = 0; i_1 <= 31; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : B[i_0][i_1]
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : B[0][0]
							// regulate_c_name       : B
							// input_type_conversion : *(int*)&B[i_0][i_1]
							if (&(B[0][0]) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> B_tmp_mem;
								B_tmp_mem = *(int*)&B[i_0][i_1];
								B_1_tvin_wrapc_buffer[hls_map_index].range(31, 0) = B_tmp_mem.range(31, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 64; i++)
		{
			sprintf(tvin_B_1, "%s\n", (B_1_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_B_1, tvin_B_1);
		}

		tcl_file.set_num(64, &tcl_file.B_1_depth);
		sprintf(tvin_B_1, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_B_1, tvin_B_1);

		// release memory allocation
		delete [] B_1_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_B_2, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_B_2, tvin_B_2);

		sc_bv<32>* B_2_tvin_wrapc_buffer = new sc_bv<32>[64];

		// RTL Name: B_2
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: B(31, 0)
				{
					// carray: (4) => (5) @ (1)
					for (int i_0 = 4; i_0 <= 5; i_0 += 1)
					{
						// carray: (0) => (31) @ (1)
						for (int i_1 = 0; i_1 <= 31; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : B[i_0][i_1]
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : B[0][0]
							// regulate_c_name       : B
							// input_type_conversion : *(int*)&B[i_0][i_1]
							if (&(B[0][0]) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> B_tmp_mem;
								B_tmp_mem = *(int*)&B[i_0][i_1];
								B_2_tvin_wrapc_buffer[hls_map_index].range(31, 0) = B_tmp_mem.range(31, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 64; i++)
		{
			sprintf(tvin_B_2, "%s\n", (B_2_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_B_2, tvin_B_2);
		}

		tcl_file.set_num(64, &tcl_file.B_2_depth);
		sprintf(tvin_B_2, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_B_2, tvin_B_2);

		// release memory allocation
		delete [] B_2_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_B_3, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_B_3, tvin_B_3);

		sc_bv<32>* B_3_tvin_wrapc_buffer = new sc_bv<32>[64];

		// RTL Name: B_3
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: B(31, 0)
				{
					// carray: (6) => (7) @ (1)
					for (int i_0 = 6; i_0 <= 7; i_0 += 1)
					{
						// carray: (0) => (31) @ (1)
						for (int i_1 = 0; i_1 <= 31; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : B[i_0][i_1]
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : B[0][0]
							// regulate_c_name       : B
							// input_type_conversion : *(int*)&B[i_0][i_1]
							if (&(B[0][0]) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> B_tmp_mem;
								B_tmp_mem = *(int*)&B[i_0][i_1];
								B_3_tvin_wrapc_buffer[hls_map_index].range(31, 0) = B_tmp_mem.range(31, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 64; i++)
		{
			sprintf(tvin_B_3, "%s\n", (B_3_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_B_3, tvin_B_3);
		}

		tcl_file.set_num(64, &tcl_file.B_3_depth);
		sprintf(tvin_B_3, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_B_3, tvin_B_3);

		// release memory allocation
		delete [] B_3_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_B_4, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_B_4, tvin_B_4);

		sc_bv<32>* B_4_tvin_wrapc_buffer = new sc_bv<32>[64];

		// RTL Name: B_4
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: B(31, 0)
				{
					// carray: (8) => (9) @ (1)
					for (int i_0 = 8; i_0 <= 9; i_0 += 1)
					{
						// carray: (0) => (31) @ (1)
						for (int i_1 = 0; i_1 <= 31; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : B[i_0][i_1]
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : B[0][0]
							// regulate_c_name       : B
							// input_type_conversion : *(int*)&B[i_0][i_1]
							if (&(B[0][0]) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> B_tmp_mem;
								B_tmp_mem = *(int*)&B[i_0][i_1];
								B_4_tvin_wrapc_buffer[hls_map_index].range(31, 0) = B_tmp_mem.range(31, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 64; i++)
		{
			sprintf(tvin_B_4, "%s\n", (B_4_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_B_4, tvin_B_4);
		}

		tcl_file.set_num(64, &tcl_file.B_4_depth);
		sprintf(tvin_B_4, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_B_4, tvin_B_4);

		// release memory allocation
		delete [] B_4_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_B_5, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_B_5, tvin_B_5);

		sc_bv<32>* B_5_tvin_wrapc_buffer = new sc_bv<32>[64];

		// RTL Name: B_5
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: B(31, 0)
				{
					// carray: (10) => (11) @ (1)
					for (int i_0 = 10; i_0 <= 11; i_0 += 1)
					{
						// carray: (0) => (31) @ (1)
						for (int i_1 = 0; i_1 <= 31; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : B[i_0][i_1]
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : B[0][0]
							// regulate_c_name       : B
							// input_type_conversion : *(int*)&B[i_0][i_1]
							if (&(B[0][0]) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> B_tmp_mem;
								B_tmp_mem = *(int*)&B[i_0][i_1];
								B_5_tvin_wrapc_buffer[hls_map_index].range(31, 0) = B_tmp_mem.range(31, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 64; i++)
		{
			sprintf(tvin_B_5, "%s\n", (B_5_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_B_5, tvin_B_5);
		}

		tcl_file.set_num(64, &tcl_file.B_5_depth);
		sprintf(tvin_B_5, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_B_5, tvin_B_5);

		// release memory allocation
		delete [] B_5_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_B_6, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_B_6, tvin_B_6);

		sc_bv<32>* B_6_tvin_wrapc_buffer = new sc_bv<32>[64];

		// RTL Name: B_6
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: B(31, 0)
				{
					// carray: (12) => (13) @ (1)
					for (int i_0 = 12; i_0 <= 13; i_0 += 1)
					{
						// carray: (0) => (31) @ (1)
						for (int i_1 = 0; i_1 <= 31; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : B[i_0][i_1]
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : B[0][0]
							// regulate_c_name       : B
							// input_type_conversion : *(int*)&B[i_0][i_1]
							if (&(B[0][0]) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> B_tmp_mem;
								B_tmp_mem = *(int*)&B[i_0][i_1];
								B_6_tvin_wrapc_buffer[hls_map_index].range(31, 0) = B_tmp_mem.range(31, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 64; i++)
		{
			sprintf(tvin_B_6, "%s\n", (B_6_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_B_6, tvin_B_6);
		}

		tcl_file.set_num(64, &tcl_file.B_6_depth);
		sprintf(tvin_B_6, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_B_6, tvin_B_6);

		// release memory allocation
		delete [] B_6_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_B_7, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_B_7, tvin_B_7);

		sc_bv<32>* B_7_tvin_wrapc_buffer = new sc_bv<32>[64];

		// RTL Name: B_7
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: B(31, 0)
				{
					// carray: (14) => (15) @ (1)
					for (int i_0 = 14; i_0 <= 15; i_0 += 1)
					{
						// carray: (0) => (31) @ (1)
						for (int i_1 = 0; i_1 <= 31; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : B[i_0][i_1]
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : B[0][0]
							// regulate_c_name       : B
							// input_type_conversion : *(int*)&B[i_0][i_1]
							if (&(B[0][0]) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> B_tmp_mem;
								B_tmp_mem = *(int*)&B[i_0][i_1];
								B_7_tvin_wrapc_buffer[hls_map_index].range(31, 0) = B_tmp_mem.range(31, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 64; i++)
		{
			sprintf(tvin_B_7, "%s\n", (B_7_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_B_7, tvin_B_7);
		}

		tcl_file.set_num(64, &tcl_file.B_7_depth);
		sprintf(tvin_B_7, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_B_7, tvin_B_7);

		// release memory allocation
		delete [] B_7_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_B_8, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_B_8, tvin_B_8);

		sc_bv<32>* B_8_tvin_wrapc_buffer = new sc_bv<32>[64];

		// RTL Name: B_8
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: B(31, 0)
				{
					// carray: (16) => (17) @ (1)
					for (int i_0 = 16; i_0 <= 17; i_0 += 1)
					{
						// carray: (0) => (31) @ (1)
						for (int i_1 = 0; i_1 <= 31; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : B[i_0][i_1]
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : B[0][0]
							// regulate_c_name       : B
							// input_type_conversion : *(int*)&B[i_0][i_1]
							if (&(B[0][0]) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> B_tmp_mem;
								B_tmp_mem = *(int*)&B[i_0][i_1];
								B_8_tvin_wrapc_buffer[hls_map_index].range(31, 0) = B_tmp_mem.range(31, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 64; i++)
		{
			sprintf(tvin_B_8, "%s\n", (B_8_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_B_8, tvin_B_8);
		}

		tcl_file.set_num(64, &tcl_file.B_8_depth);
		sprintf(tvin_B_8, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_B_8, tvin_B_8);

		// release memory allocation
		delete [] B_8_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_B_9, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_B_9, tvin_B_9);

		sc_bv<32>* B_9_tvin_wrapc_buffer = new sc_bv<32>[64];

		// RTL Name: B_9
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: B(31, 0)
				{
					// carray: (18) => (19) @ (1)
					for (int i_0 = 18; i_0 <= 19; i_0 += 1)
					{
						// carray: (0) => (31) @ (1)
						for (int i_1 = 0; i_1 <= 31; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : B[i_0][i_1]
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : B[0][0]
							// regulate_c_name       : B
							// input_type_conversion : *(int*)&B[i_0][i_1]
							if (&(B[0][0]) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> B_tmp_mem;
								B_tmp_mem = *(int*)&B[i_0][i_1];
								B_9_tvin_wrapc_buffer[hls_map_index].range(31, 0) = B_tmp_mem.range(31, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 64; i++)
		{
			sprintf(tvin_B_9, "%s\n", (B_9_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_B_9, tvin_B_9);
		}

		tcl_file.set_num(64, &tcl_file.B_9_depth);
		sprintf(tvin_B_9, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_B_9, tvin_B_9);

		// release memory allocation
		delete [] B_9_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_B_10, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_B_10, tvin_B_10);

		sc_bv<32>* B_10_tvin_wrapc_buffer = new sc_bv<32>[64];

		// RTL Name: B_10
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: B(31, 0)
				{
					// carray: (20) => (21) @ (1)
					for (int i_0 = 20; i_0 <= 21; i_0 += 1)
					{
						// carray: (0) => (31) @ (1)
						for (int i_1 = 0; i_1 <= 31; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : B[i_0][i_1]
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : B[0][0]
							// regulate_c_name       : B
							// input_type_conversion : *(int*)&B[i_0][i_1]
							if (&(B[0][0]) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> B_tmp_mem;
								B_tmp_mem = *(int*)&B[i_0][i_1];
								B_10_tvin_wrapc_buffer[hls_map_index].range(31, 0) = B_tmp_mem.range(31, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 64; i++)
		{
			sprintf(tvin_B_10, "%s\n", (B_10_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_B_10, tvin_B_10);
		}

		tcl_file.set_num(64, &tcl_file.B_10_depth);
		sprintf(tvin_B_10, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_B_10, tvin_B_10);

		// release memory allocation
		delete [] B_10_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_B_11, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_B_11, tvin_B_11);

		sc_bv<32>* B_11_tvin_wrapc_buffer = new sc_bv<32>[64];

		// RTL Name: B_11
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: B(31, 0)
				{
					// carray: (22) => (23) @ (1)
					for (int i_0 = 22; i_0 <= 23; i_0 += 1)
					{
						// carray: (0) => (31) @ (1)
						for (int i_1 = 0; i_1 <= 31; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : B[i_0][i_1]
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : B[0][0]
							// regulate_c_name       : B
							// input_type_conversion : *(int*)&B[i_0][i_1]
							if (&(B[0][0]) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> B_tmp_mem;
								B_tmp_mem = *(int*)&B[i_0][i_1];
								B_11_tvin_wrapc_buffer[hls_map_index].range(31, 0) = B_tmp_mem.range(31, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 64; i++)
		{
			sprintf(tvin_B_11, "%s\n", (B_11_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_B_11, tvin_B_11);
		}

		tcl_file.set_num(64, &tcl_file.B_11_depth);
		sprintf(tvin_B_11, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_B_11, tvin_B_11);

		// release memory allocation
		delete [] B_11_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_B_12, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_B_12, tvin_B_12);

		sc_bv<32>* B_12_tvin_wrapc_buffer = new sc_bv<32>[64];

		// RTL Name: B_12
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: B(31, 0)
				{
					// carray: (24) => (25) @ (1)
					for (int i_0 = 24; i_0 <= 25; i_0 += 1)
					{
						// carray: (0) => (31) @ (1)
						for (int i_1 = 0; i_1 <= 31; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : B[i_0][i_1]
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : B[0][0]
							// regulate_c_name       : B
							// input_type_conversion : *(int*)&B[i_0][i_1]
							if (&(B[0][0]) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> B_tmp_mem;
								B_tmp_mem = *(int*)&B[i_0][i_1];
								B_12_tvin_wrapc_buffer[hls_map_index].range(31, 0) = B_tmp_mem.range(31, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 64; i++)
		{
			sprintf(tvin_B_12, "%s\n", (B_12_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_B_12, tvin_B_12);
		}

		tcl_file.set_num(64, &tcl_file.B_12_depth);
		sprintf(tvin_B_12, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_B_12, tvin_B_12);

		// release memory allocation
		delete [] B_12_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_B_13, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_B_13, tvin_B_13);

		sc_bv<32>* B_13_tvin_wrapc_buffer = new sc_bv<32>[64];

		// RTL Name: B_13
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: B(31, 0)
				{
					// carray: (26) => (27) @ (1)
					for (int i_0 = 26; i_0 <= 27; i_0 += 1)
					{
						// carray: (0) => (31) @ (1)
						for (int i_1 = 0; i_1 <= 31; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : B[i_0][i_1]
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : B[0][0]
							// regulate_c_name       : B
							// input_type_conversion : *(int*)&B[i_0][i_1]
							if (&(B[0][0]) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> B_tmp_mem;
								B_tmp_mem = *(int*)&B[i_0][i_1];
								B_13_tvin_wrapc_buffer[hls_map_index].range(31, 0) = B_tmp_mem.range(31, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 64; i++)
		{
			sprintf(tvin_B_13, "%s\n", (B_13_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_B_13, tvin_B_13);
		}

		tcl_file.set_num(64, &tcl_file.B_13_depth);
		sprintf(tvin_B_13, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_B_13, tvin_B_13);

		// release memory allocation
		delete [] B_13_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_B_14, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_B_14, tvin_B_14);

		sc_bv<32>* B_14_tvin_wrapc_buffer = new sc_bv<32>[64];

		// RTL Name: B_14
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: B(31, 0)
				{
					// carray: (28) => (29) @ (1)
					for (int i_0 = 28; i_0 <= 29; i_0 += 1)
					{
						// carray: (0) => (31) @ (1)
						for (int i_1 = 0; i_1 <= 31; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : B[i_0][i_1]
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : B[0][0]
							// regulate_c_name       : B
							// input_type_conversion : *(int*)&B[i_0][i_1]
							if (&(B[0][0]) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> B_tmp_mem;
								B_tmp_mem = *(int*)&B[i_0][i_1];
								B_14_tvin_wrapc_buffer[hls_map_index].range(31, 0) = B_tmp_mem.range(31, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 64; i++)
		{
			sprintf(tvin_B_14, "%s\n", (B_14_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_B_14, tvin_B_14);
		}

		tcl_file.set_num(64, &tcl_file.B_14_depth);
		sprintf(tvin_B_14, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_B_14, tvin_B_14);

		// release memory allocation
		delete [] B_14_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_B_15, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_B_15, tvin_B_15);

		sc_bv<32>* B_15_tvin_wrapc_buffer = new sc_bv<32>[64];

		// RTL Name: B_15
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: B(31, 0)
				{
					// carray: (30) => (31) @ (1)
					for (int i_0 = 30; i_0 <= 31; i_0 += 1)
					{
						// carray: (0) => (31) @ (1)
						for (int i_1 = 0; i_1 <= 31; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : B[i_0][i_1]
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : B[0][0]
							// regulate_c_name       : B
							// input_type_conversion : *(int*)&B[i_0][i_1]
							if (&(B[0][0]) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> B_tmp_mem;
								B_tmp_mem = *(int*)&B[i_0][i_1];
								B_15_tvin_wrapc_buffer[hls_map_index].range(31, 0) = B_tmp_mem.range(31, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 64; i++)
		{
			sprintf(tvin_B_15, "%s\n", (B_15_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_B_15, tvin_B_15);
		}

		tcl_file.set_num(64, &tcl_file.B_15_depth);
		sprintf(tvin_B_15, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_B_15, tvin_B_15);

		// release memory allocation
		delete [] B_15_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_C, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_C, tvin_C);

		sc_bv<32>* C_tvin_wrapc_buffer = new sc_bv<32>[1024];

		// RTL Name: C
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: C(31, 0)
				{
					// carray: (0) => (31) @ (1)
					for (int i_0 = 0; i_0 <= 31; i_0 += 1)
					{
						// carray: (0) => (31) @ (1)
						for (int i_1 = 0; i_1 <= 31; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : C[i_0][i_1]
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : C[0][0]
							// regulate_c_name       : C
							// input_type_conversion : *(int*)&C[i_0][i_1]
							if (&(C[0][0]) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> C_tmp_mem;
								C_tmp_mem = *(int*)&C[i_0][i_1];
								C_tvin_wrapc_buffer[hls_map_index].range(31, 0) = C_tmp_mem.range(31, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1024; i++)
		{
			sprintf(tvin_C, "%s\n", (C_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_C, tvin_C);
		}

		tcl_file.set_num(1024, &tcl_file.C_depth);
		sprintf(tvin_C, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_C, tvin_C);

		// release memory allocation
		delete [] C_tvin_wrapc_buffer;

// [call_c_dut] ---------->

		CodeState = CALL_C_DUT;
		standalone_mmult(A, B, C);

		CodeState = DUMP_OUTPUTS;

		// [[transaction]]
		sprintf(tvout_C, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_C, tvout_C);

		sc_bv<32>* C_tvout_wrapc_buffer = new sc_bv<32>[1024];

		// RTL Name: C
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: C(31, 0)
				{
					// carray: (0) => (31) @ (1)
					for (int i_0 = 0; i_0 <= 31; i_0 += 1)
					{
						// carray: (0) => (31) @ (1)
						for (int i_1 = 0; i_1 <= 31; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : C[i_0][i_1]
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : C[0][0]
							// regulate_c_name       : C
							// input_type_conversion : *(int*)&C[i_0][i_1]
							if (&(C[0][0]) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> C_tmp_mem;
								C_tmp_mem = *(int*)&C[i_0][i_1];
								C_tvout_wrapc_buffer[hls_map_index].range(31, 0) = C_tmp_mem.range(31, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1024; i++)
		{
			sprintf(tvout_C, "%s\n", (C_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_C, tvout_C);
		}

		tcl_file.set_num(1024, &tcl_file.C_depth);
		sprintf(tvout_C, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_C, tvout_C);

		// release memory allocation
		delete [] C_tvout_wrapc_buffer;

		CodeState = DELETE_CHAR_BUFFERS;
		// release memory allocation: "A_0"
		delete [] tvin_A_0;
		// release memory allocation: "A_1"
		delete [] tvin_A_1;
		// release memory allocation: "A_2"
		delete [] tvin_A_2;
		// release memory allocation: "A_3"
		delete [] tvin_A_3;
		// release memory allocation: "A_4"
		delete [] tvin_A_4;
		// release memory allocation: "A_5"
		delete [] tvin_A_5;
		// release memory allocation: "A_6"
		delete [] tvin_A_6;
		// release memory allocation: "A_7"
		delete [] tvin_A_7;
		// release memory allocation: "A_8"
		delete [] tvin_A_8;
		// release memory allocation: "A_9"
		delete [] tvin_A_9;
		// release memory allocation: "A_10"
		delete [] tvin_A_10;
		// release memory allocation: "A_11"
		delete [] tvin_A_11;
		// release memory allocation: "A_12"
		delete [] tvin_A_12;
		// release memory allocation: "A_13"
		delete [] tvin_A_13;
		// release memory allocation: "A_14"
		delete [] tvin_A_14;
		// release memory allocation: "A_15"
		delete [] tvin_A_15;
		// release memory allocation: "B_0"
		delete [] tvin_B_0;
		// release memory allocation: "B_1"
		delete [] tvin_B_1;
		// release memory allocation: "B_2"
		delete [] tvin_B_2;
		// release memory allocation: "B_3"
		delete [] tvin_B_3;
		// release memory allocation: "B_4"
		delete [] tvin_B_4;
		// release memory allocation: "B_5"
		delete [] tvin_B_5;
		// release memory allocation: "B_6"
		delete [] tvin_B_6;
		// release memory allocation: "B_7"
		delete [] tvin_B_7;
		// release memory allocation: "B_8"
		delete [] tvin_B_8;
		// release memory allocation: "B_9"
		delete [] tvin_B_9;
		// release memory allocation: "B_10"
		delete [] tvin_B_10;
		// release memory allocation: "B_11"
		delete [] tvin_B_11;
		// release memory allocation: "B_12"
		delete [] tvin_B_12;
		// release memory allocation: "B_13"
		delete [] tvin_B_13;
		// release memory allocation: "B_14"
		delete [] tvin_B_14;
		// release memory allocation: "B_15"
		delete [] tvin_B_15;
		// release memory allocation: "C"
		delete [] tvout_C;
		delete [] tvin_C;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);
	}
}

