-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity standalone_mmult is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_0_ce0 : OUT STD_LOGIC;
    A_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_0_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_0_ce1 : OUT STD_LOGIC;
    A_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_1_ce0 : OUT STD_LOGIC;
    A_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_1_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_1_ce1 : OUT STD_LOGIC;
    A_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_2_ce0 : OUT STD_LOGIC;
    A_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_2_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_2_ce1 : OUT STD_LOGIC;
    A_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_3_ce0 : OUT STD_LOGIC;
    A_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_3_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_3_ce1 : OUT STD_LOGIC;
    A_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_4_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_4_ce0 : OUT STD_LOGIC;
    A_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_4_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_4_ce1 : OUT STD_LOGIC;
    A_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_5_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_5_ce0 : OUT STD_LOGIC;
    A_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_5_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_5_ce1 : OUT STD_LOGIC;
    A_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_6_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_6_ce0 : OUT STD_LOGIC;
    A_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_6_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_6_ce1 : OUT STD_LOGIC;
    A_6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_7_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_7_ce0 : OUT STD_LOGIC;
    A_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_7_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_7_ce1 : OUT STD_LOGIC;
    A_7_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_8_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_8_ce0 : OUT STD_LOGIC;
    A_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_8_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_8_ce1 : OUT STD_LOGIC;
    A_8_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_9_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_9_ce0 : OUT STD_LOGIC;
    A_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_9_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_9_ce1 : OUT STD_LOGIC;
    A_9_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_10_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_10_ce0 : OUT STD_LOGIC;
    A_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_10_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_10_ce1 : OUT STD_LOGIC;
    A_10_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_11_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_11_ce0 : OUT STD_LOGIC;
    A_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_11_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_11_ce1 : OUT STD_LOGIC;
    A_11_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_12_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_12_ce0 : OUT STD_LOGIC;
    A_12_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_12_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_12_ce1 : OUT STD_LOGIC;
    A_12_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_13_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_13_ce0 : OUT STD_LOGIC;
    A_13_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_13_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_13_ce1 : OUT STD_LOGIC;
    A_13_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_14_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_14_ce0 : OUT STD_LOGIC;
    A_14_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_14_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_14_ce1 : OUT STD_LOGIC;
    A_14_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_15_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_15_ce0 : OUT STD_LOGIC;
    A_15_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_15_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_15_ce1 : OUT STD_LOGIC;
    A_15_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_0_ce0 : OUT STD_LOGIC;
    B_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_0_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_0_ce1 : OUT STD_LOGIC;
    B_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_1_ce0 : OUT STD_LOGIC;
    B_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_1_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_1_ce1 : OUT STD_LOGIC;
    B_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_2_ce0 : OUT STD_LOGIC;
    B_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_2_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_2_ce1 : OUT STD_LOGIC;
    B_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_3_ce0 : OUT STD_LOGIC;
    B_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_3_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_3_ce1 : OUT STD_LOGIC;
    B_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_4_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_4_ce0 : OUT STD_LOGIC;
    B_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_4_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_4_ce1 : OUT STD_LOGIC;
    B_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_5_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_5_ce0 : OUT STD_LOGIC;
    B_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_5_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_5_ce1 : OUT STD_LOGIC;
    B_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_6_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_6_ce0 : OUT STD_LOGIC;
    B_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_6_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_6_ce1 : OUT STD_LOGIC;
    B_6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_7_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_7_ce0 : OUT STD_LOGIC;
    B_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_7_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_7_ce1 : OUT STD_LOGIC;
    B_7_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_8_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_8_ce0 : OUT STD_LOGIC;
    B_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_8_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_8_ce1 : OUT STD_LOGIC;
    B_8_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_9_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_9_ce0 : OUT STD_LOGIC;
    B_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_9_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_9_ce1 : OUT STD_LOGIC;
    B_9_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_10_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_10_ce0 : OUT STD_LOGIC;
    B_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_10_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_10_ce1 : OUT STD_LOGIC;
    B_10_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_11_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_11_ce0 : OUT STD_LOGIC;
    B_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_11_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_11_ce1 : OUT STD_LOGIC;
    B_11_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_12_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_12_ce0 : OUT STD_LOGIC;
    B_12_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_12_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_12_ce1 : OUT STD_LOGIC;
    B_12_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_13_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_13_ce0 : OUT STD_LOGIC;
    B_13_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_13_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_13_ce1 : OUT STD_LOGIC;
    B_13_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_14_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_14_ce0 : OUT STD_LOGIC;
    B_14_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_14_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_14_ce1 : OUT STD_LOGIC;
    B_14_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_15_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_15_ce0 : OUT STD_LOGIC;
    B_15_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_15_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_15_ce1 : OUT STD_LOGIC;
    B_15_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    C_ce0 : OUT STD_LOGIC;
    C_we0 : OUT STD_LOGIC;
    C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of standalone_mmult is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "standalone_mmult,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=1192,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=160,HLS_SYN_FF=16368,HLS_SYN_LUT=24142}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_mmult_hw_float_32_s_fu_74_ap_start : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_ap_done : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_ap_idle : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_ap_ready : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_a_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_a_0_ce0 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_a_0_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_a_0_ce1 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_a_1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_a_1_ce0 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_a_1_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_a_1_ce1 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_a_2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_a_2_ce0 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_a_2_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_a_2_ce1 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_a_3_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_a_3_ce0 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_a_3_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_a_3_ce1 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_a_4_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_a_4_ce0 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_a_4_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_a_4_ce1 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_a_5_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_a_5_ce0 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_a_5_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_a_5_ce1 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_a_6_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_a_6_ce0 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_a_6_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_a_6_ce1 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_a_7_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_a_7_ce0 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_a_7_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_a_7_ce1 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_a_8_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_a_8_ce0 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_a_8_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_a_8_ce1 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_a_9_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_a_9_ce0 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_a_9_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_a_9_ce1 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_a_10_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_a_10_ce0 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_a_10_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_a_10_ce1 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_a_11_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_a_11_ce0 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_a_11_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_a_11_ce1 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_a_12_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_a_12_ce0 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_a_12_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_a_12_ce1 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_a_13_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_a_13_ce0 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_a_13_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_a_13_ce1 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_a_14_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_a_14_ce0 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_a_14_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_a_14_ce1 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_a_15_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_a_15_ce0 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_a_15_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_a_15_ce1 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_b_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_b_0_ce0 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_b_0_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_b_0_ce1 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_b_1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_b_1_ce0 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_b_1_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_b_1_ce1 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_b_2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_b_2_ce0 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_b_2_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_b_2_ce1 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_b_3_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_b_3_ce0 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_b_3_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_b_3_ce1 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_b_4_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_b_4_ce0 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_b_4_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_b_4_ce1 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_b_5_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_b_5_ce0 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_b_5_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_b_5_ce1 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_b_6_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_b_6_ce0 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_b_6_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_b_6_ce1 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_b_7_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_b_7_ce0 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_b_7_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_b_7_ce1 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_b_8_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_b_8_ce0 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_b_8_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_b_8_ce1 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_b_9_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_b_9_ce0 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_b_9_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_b_9_ce1 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_b_10_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_b_10_ce0 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_b_10_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_b_10_ce1 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_b_11_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_b_11_ce0 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_b_11_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_b_11_ce1 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_b_12_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_b_12_ce0 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_b_12_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_b_12_ce1 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_b_13_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_b_13_ce0 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_b_13_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_b_13_ce1 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_b_14_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_b_14_ce0 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_b_14_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_b_14_ce1 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_b_15_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_b_15_ce0 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_b_15_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_b_15_ce1 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_out_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mmult_hw_float_32_s_fu_74_out_r_ce0 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_out_r_we0 : STD_LOGIC;
    signal grp_mmult_hw_float_32_s_fu_74_out_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_grp_mmult_hw_float_32_s_fu_74_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component mmult_hw_float_32_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_0_ce0 : OUT STD_LOGIC;
        a_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_0_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_0_ce1 : OUT STD_LOGIC;
        a_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_1_ce0 : OUT STD_LOGIC;
        a_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_1_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_1_ce1 : OUT STD_LOGIC;
        a_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_2_ce0 : OUT STD_LOGIC;
        a_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_2_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_2_ce1 : OUT STD_LOGIC;
        a_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_3_ce0 : OUT STD_LOGIC;
        a_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_3_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_3_ce1 : OUT STD_LOGIC;
        a_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_4_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_4_ce0 : OUT STD_LOGIC;
        a_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_4_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_4_ce1 : OUT STD_LOGIC;
        a_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_5_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_5_ce0 : OUT STD_LOGIC;
        a_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_5_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_5_ce1 : OUT STD_LOGIC;
        a_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_6_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_6_ce0 : OUT STD_LOGIC;
        a_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_6_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_6_ce1 : OUT STD_LOGIC;
        a_6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_7_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_7_ce0 : OUT STD_LOGIC;
        a_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_7_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_7_ce1 : OUT STD_LOGIC;
        a_7_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_8_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_8_ce0 : OUT STD_LOGIC;
        a_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_8_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_8_ce1 : OUT STD_LOGIC;
        a_8_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_9_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_9_ce0 : OUT STD_LOGIC;
        a_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_9_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_9_ce1 : OUT STD_LOGIC;
        a_9_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_10_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_10_ce0 : OUT STD_LOGIC;
        a_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_10_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_10_ce1 : OUT STD_LOGIC;
        a_10_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_11_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_11_ce0 : OUT STD_LOGIC;
        a_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_11_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_11_ce1 : OUT STD_LOGIC;
        a_11_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_12_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_12_ce0 : OUT STD_LOGIC;
        a_12_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_12_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_12_ce1 : OUT STD_LOGIC;
        a_12_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_13_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_13_ce0 : OUT STD_LOGIC;
        a_13_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_13_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_13_ce1 : OUT STD_LOGIC;
        a_13_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_14_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_14_ce0 : OUT STD_LOGIC;
        a_14_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_14_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_14_ce1 : OUT STD_LOGIC;
        a_14_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_15_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_15_ce0 : OUT STD_LOGIC;
        a_15_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_15_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_15_ce1 : OUT STD_LOGIC;
        a_15_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        b_0_ce0 : OUT STD_LOGIC;
        b_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_0_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        b_0_ce1 : OUT STD_LOGIC;
        b_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        b_1_ce0 : OUT STD_LOGIC;
        b_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_1_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        b_1_ce1 : OUT STD_LOGIC;
        b_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        b_2_ce0 : OUT STD_LOGIC;
        b_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_2_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        b_2_ce1 : OUT STD_LOGIC;
        b_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        b_3_ce0 : OUT STD_LOGIC;
        b_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_3_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        b_3_ce1 : OUT STD_LOGIC;
        b_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_4_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        b_4_ce0 : OUT STD_LOGIC;
        b_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_4_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        b_4_ce1 : OUT STD_LOGIC;
        b_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_5_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        b_5_ce0 : OUT STD_LOGIC;
        b_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_5_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        b_5_ce1 : OUT STD_LOGIC;
        b_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_6_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        b_6_ce0 : OUT STD_LOGIC;
        b_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_6_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        b_6_ce1 : OUT STD_LOGIC;
        b_6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_7_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        b_7_ce0 : OUT STD_LOGIC;
        b_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_7_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        b_7_ce1 : OUT STD_LOGIC;
        b_7_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_8_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        b_8_ce0 : OUT STD_LOGIC;
        b_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_8_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        b_8_ce1 : OUT STD_LOGIC;
        b_8_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_9_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        b_9_ce0 : OUT STD_LOGIC;
        b_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_9_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        b_9_ce1 : OUT STD_LOGIC;
        b_9_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_10_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        b_10_ce0 : OUT STD_LOGIC;
        b_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_10_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        b_10_ce1 : OUT STD_LOGIC;
        b_10_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_11_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        b_11_ce0 : OUT STD_LOGIC;
        b_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_11_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        b_11_ce1 : OUT STD_LOGIC;
        b_11_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_12_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        b_12_ce0 : OUT STD_LOGIC;
        b_12_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_12_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        b_12_ce1 : OUT STD_LOGIC;
        b_12_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_13_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        b_13_ce0 : OUT STD_LOGIC;
        b_13_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_13_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        b_13_ce1 : OUT STD_LOGIC;
        b_13_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_14_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        b_14_ce0 : OUT STD_LOGIC;
        b_14_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_14_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        b_14_ce1 : OUT STD_LOGIC;
        b_14_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_15_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        b_15_ce0 : OUT STD_LOGIC;
        b_15_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_15_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        b_15_ce1 : OUT STD_LOGIC;
        b_15_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_mmult_hw_float_32_s_fu_74 : component mmult_hw_float_32_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mmult_hw_float_32_s_fu_74_ap_start,
        ap_done => grp_mmult_hw_float_32_s_fu_74_ap_done,
        ap_idle => grp_mmult_hw_float_32_s_fu_74_ap_idle,
        ap_ready => grp_mmult_hw_float_32_s_fu_74_ap_ready,
        a_0_address0 => grp_mmult_hw_float_32_s_fu_74_a_0_address0,
        a_0_ce0 => grp_mmult_hw_float_32_s_fu_74_a_0_ce0,
        a_0_q0 => A_0_q0,
        a_0_address1 => grp_mmult_hw_float_32_s_fu_74_a_0_address1,
        a_0_ce1 => grp_mmult_hw_float_32_s_fu_74_a_0_ce1,
        a_0_q1 => A_0_q1,
        a_1_address0 => grp_mmult_hw_float_32_s_fu_74_a_1_address0,
        a_1_ce0 => grp_mmult_hw_float_32_s_fu_74_a_1_ce0,
        a_1_q0 => A_1_q0,
        a_1_address1 => grp_mmult_hw_float_32_s_fu_74_a_1_address1,
        a_1_ce1 => grp_mmult_hw_float_32_s_fu_74_a_1_ce1,
        a_1_q1 => A_1_q1,
        a_2_address0 => grp_mmult_hw_float_32_s_fu_74_a_2_address0,
        a_2_ce0 => grp_mmult_hw_float_32_s_fu_74_a_2_ce0,
        a_2_q0 => A_2_q0,
        a_2_address1 => grp_mmult_hw_float_32_s_fu_74_a_2_address1,
        a_2_ce1 => grp_mmult_hw_float_32_s_fu_74_a_2_ce1,
        a_2_q1 => A_2_q1,
        a_3_address0 => grp_mmult_hw_float_32_s_fu_74_a_3_address0,
        a_3_ce0 => grp_mmult_hw_float_32_s_fu_74_a_3_ce0,
        a_3_q0 => A_3_q0,
        a_3_address1 => grp_mmult_hw_float_32_s_fu_74_a_3_address1,
        a_3_ce1 => grp_mmult_hw_float_32_s_fu_74_a_3_ce1,
        a_3_q1 => A_3_q1,
        a_4_address0 => grp_mmult_hw_float_32_s_fu_74_a_4_address0,
        a_4_ce0 => grp_mmult_hw_float_32_s_fu_74_a_4_ce0,
        a_4_q0 => A_4_q0,
        a_4_address1 => grp_mmult_hw_float_32_s_fu_74_a_4_address1,
        a_4_ce1 => grp_mmult_hw_float_32_s_fu_74_a_4_ce1,
        a_4_q1 => A_4_q1,
        a_5_address0 => grp_mmult_hw_float_32_s_fu_74_a_5_address0,
        a_5_ce0 => grp_mmult_hw_float_32_s_fu_74_a_5_ce0,
        a_5_q0 => A_5_q0,
        a_5_address1 => grp_mmult_hw_float_32_s_fu_74_a_5_address1,
        a_5_ce1 => grp_mmult_hw_float_32_s_fu_74_a_5_ce1,
        a_5_q1 => A_5_q1,
        a_6_address0 => grp_mmult_hw_float_32_s_fu_74_a_6_address0,
        a_6_ce0 => grp_mmult_hw_float_32_s_fu_74_a_6_ce0,
        a_6_q0 => A_6_q0,
        a_6_address1 => grp_mmult_hw_float_32_s_fu_74_a_6_address1,
        a_6_ce1 => grp_mmult_hw_float_32_s_fu_74_a_6_ce1,
        a_6_q1 => A_6_q1,
        a_7_address0 => grp_mmult_hw_float_32_s_fu_74_a_7_address0,
        a_7_ce0 => grp_mmult_hw_float_32_s_fu_74_a_7_ce0,
        a_7_q0 => A_7_q0,
        a_7_address1 => grp_mmult_hw_float_32_s_fu_74_a_7_address1,
        a_7_ce1 => grp_mmult_hw_float_32_s_fu_74_a_7_ce1,
        a_7_q1 => A_7_q1,
        a_8_address0 => grp_mmult_hw_float_32_s_fu_74_a_8_address0,
        a_8_ce0 => grp_mmult_hw_float_32_s_fu_74_a_8_ce0,
        a_8_q0 => A_8_q0,
        a_8_address1 => grp_mmult_hw_float_32_s_fu_74_a_8_address1,
        a_8_ce1 => grp_mmult_hw_float_32_s_fu_74_a_8_ce1,
        a_8_q1 => A_8_q1,
        a_9_address0 => grp_mmult_hw_float_32_s_fu_74_a_9_address0,
        a_9_ce0 => grp_mmult_hw_float_32_s_fu_74_a_9_ce0,
        a_9_q0 => A_9_q0,
        a_9_address1 => grp_mmult_hw_float_32_s_fu_74_a_9_address1,
        a_9_ce1 => grp_mmult_hw_float_32_s_fu_74_a_9_ce1,
        a_9_q1 => A_9_q1,
        a_10_address0 => grp_mmult_hw_float_32_s_fu_74_a_10_address0,
        a_10_ce0 => grp_mmult_hw_float_32_s_fu_74_a_10_ce0,
        a_10_q0 => A_10_q0,
        a_10_address1 => grp_mmult_hw_float_32_s_fu_74_a_10_address1,
        a_10_ce1 => grp_mmult_hw_float_32_s_fu_74_a_10_ce1,
        a_10_q1 => A_10_q1,
        a_11_address0 => grp_mmult_hw_float_32_s_fu_74_a_11_address0,
        a_11_ce0 => grp_mmult_hw_float_32_s_fu_74_a_11_ce0,
        a_11_q0 => A_11_q0,
        a_11_address1 => grp_mmult_hw_float_32_s_fu_74_a_11_address1,
        a_11_ce1 => grp_mmult_hw_float_32_s_fu_74_a_11_ce1,
        a_11_q1 => A_11_q1,
        a_12_address0 => grp_mmult_hw_float_32_s_fu_74_a_12_address0,
        a_12_ce0 => grp_mmult_hw_float_32_s_fu_74_a_12_ce0,
        a_12_q0 => A_12_q0,
        a_12_address1 => grp_mmult_hw_float_32_s_fu_74_a_12_address1,
        a_12_ce1 => grp_mmult_hw_float_32_s_fu_74_a_12_ce1,
        a_12_q1 => A_12_q1,
        a_13_address0 => grp_mmult_hw_float_32_s_fu_74_a_13_address0,
        a_13_ce0 => grp_mmult_hw_float_32_s_fu_74_a_13_ce0,
        a_13_q0 => A_13_q0,
        a_13_address1 => grp_mmult_hw_float_32_s_fu_74_a_13_address1,
        a_13_ce1 => grp_mmult_hw_float_32_s_fu_74_a_13_ce1,
        a_13_q1 => A_13_q1,
        a_14_address0 => grp_mmult_hw_float_32_s_fu_74_a_14_address0,
        a_14_ce0 => grp_mmult_hw_float_32_s_fu_74_a_14_ce0,
        a_14_q0 => A_14_q0,
        a_14_address1 => grp_mmult_hw_float_32_s_fu_74_a_14_address1,
        a_14_ce1 => grp_mmult_hw_float_32_s_fu_74_a_14_ce1,
        a_14_q1 => A_14_q1,
        a_15_address0 => grp_mmult_hw_float_32_s_fu_74_a_15_address0,
        a_15_ce0 => grp_mmult_hw_float_32_s_fu_74_a_15_ce0,
        a_15_q0 => A_15_q0,
        a_15_address1 => grp_mmult_hw_float_32_s_fu_74_a_15_address1,
        a_15_ce1 => grp_mmult_hw_float_32_s_fu_74_a_15_ce1,
        a_15_q1 => A_15_q1,
        b_0_address0 => grp_mmult_hw_float_32_s_fu_74_b_0_address0,
        b_0_ce0 => grp_mmult_hw_float_32_s_fu_74_b_0_ce0,
        b_0_q0 => B_0_q0,
        b_0_address1 => grp_mmult_hw_float_32_s_fu_74_b_0_address1,
        b_0_ce1 => grp_mmult_hw_float_32_s_fu_74_b_0_ce1,
        b_0_q1 => B_0_q1,
        b_1_address0 => grp_mmult_hw_float_32_s_fu_74_b_1_address0,
        b_1_ce0 => grp_mmult_hw_float_32_s_fu_74_b_1_ce0,
        b_1_q0 => B_1_q0,
        b_1_address1 => grp_mmult_hw_float_32_s_fu_74_b_1_address1,
        b_1_ce1 => grp_mmult_hw_float_32_s_fu_74_b_1_ce1,
        b_1_q1 => B_1_q1,
        b_2_address0 => grp_mmult_hw_float_32_s_fu_74_b_2_address0,
        b_2_ce0 => grp_mmult_hw_float_32_s_fu_74_b_2_ce0,
        b_2_q0 => B_2_q0,
        b_2_address1 => grp_mmult_hw_float_32_s_fu_74_b_2_address1,
        b_2_ce1 => grp_mmult_hw_float_32_s_fu_74_b_2_ce1,
        b_2_q1 => B_2_q1,
        b_3_address0 => grp_mmult_hw_float_32_s_fu_74_b_3_address0,
        b_3_ce0 => grp_mmult_hw_float_32_s_fu_74_b_3_ce0,
        b_3_q0 => B_3_q0,
        b_3_address1 => grp_mmult_hw_float_32_s_fu_74_b_3_address1,
        b_3_ce1 => grp_mmult_hw_float_32_s_fu_74_b_3_ce1,
        b_3_q1 => B_3_q1,
        b_4_address0 => grp_mmult_hw_float_32_s_fu_74_b_4_address0,
        b_4_ce0 => grp_mmult_hw_float_32_s_fu_74_b_4_ce0,
        b_4_q0 => B_4_q0,
        b_4_address1 => grp_mmult_hw_float_32_s_fu_74_b_4_address1,
        b_4_ce1 => grp_mmult_hw_float_32_s_fu_74_b_4_ce1,
        b_4_q1 => B_4_q1,
        b_5_address0 => grp_mmult_hw_float_32_s_fu_74_b_5_address0,
        b_5_ce0 => grp_mmult_hw_float_32_s_fu_74_b_5_ce0,
        b_5_q0 => B_5_q0,
        b_5_address1 => grp_mmult_hw_float_32_s_fu_74_b_5_address1,
        b_5_ce1 => grp_mmult_hw_float_32_s_fu_74_b_5_ce1,
        b_5_q1 => B_5_q1,
        b_6_address0 => grp_mmult_hw_float_32_s_fu_74_b_6_address0,
        b_6_ce0 => grp_mmult_hw_float_32_s_fu_74_b_6_ce0,
        b_6_q0 => B_6_q0,
        b_6_address1 => grp_mmult_hw_float_32_s_fu_74_b_6_address1,
        b_6_ce1 => grp_mmult_hw_float_32_s_fu_74_b_6_ce1,
        b_6_q1 => B_6_q1,
        b_7_address0 => grp_mmult_hw_float_32_s_fu_74_b_7_address0,
        b_7_ce0 => grp_mmult_hw_float_32_s_fu_74_b_7_ce0,
        b_7_q0 => B_7_q0,
        b_7_address1 => grp_mmult_hw_float_32_s_fu_74_b_7_address1,
        b_7_ce1 => grp_mmult_hw_float_32_s_fu_74_b_7_ce1,
        b_7_q1 => B_7_q1,
        b_8_address0 => grp_mmult_hw_float_32_s_fu_74_b_8_address0,
        b_8_ce0 => grp_mmult_hw_float_32_s_fu_74_b_8_ce0,
        b_8_q0 => B_8_q0,
        b_8_address1 => grp_mmult_hw_float_32_s_fu_74_b_8_address1,
        b_8_ce1 => grp_mmult_hw_float_32_s_fu_74_b_8_ce1,
        b_8_q1 => B_8_q1,
        b_9_address0 => grp_mmult_hw_float_32_s_fu_74_b_9_address0,
        b_9_ce0 => grp_mmult_hw_float_32_s_fu_74_b_9_ce0,
        b_9_q0 => B_9_q0,
        b_9_address1 => grp_mmult_hw_float_32_s_fu_74_b_9_address1,
        b_9_ce1 => grp_mmult_hw_float_32_s_fu_74_b_9_ce1,
        b_9_q1 => B_9_q1,
        b_10_address0 => grp_mmult_hw_float_32_s_fu_74_b_10_address0,
        b_10_ce0 => grp_mmult_hw_float_32_s_fu_74_b_10_ce0,
        b_10_q0 => B_10_q0,
        b_10_address1 => grp_mmult_hw_float_32_s_fu_74_b_10_address1,
        b_10_ce1 => grp_mmult_hw_float_32_s_fu_74_b_10_ce1,
        b_10_q1 => B_10_q1,
        b_11_address0 => grp_mmult_hw_float_32_s_fu_74_b_11_address0,
        b_11_ce0 => grp_mmult_hw_float_32_s_fu_74_b_11_ce0,
        b_11_q0 => B_11_q0,
        b_11_address1 => grp_mmult_hw_float_32_s_fu_74_b_11_address1,
        b_11_ce1 => grp_mmult_hw_float_32_s_fu_74_b_11_ce1,
        b_11_q1 => B_11_q1,
        b_12_address0 => grp_mmult_hw_float_32_s_fu_74_b_12_address0,
        b_12_ce0 => grp_mmult_hw_float_32_s_fu_74_b_12_ce0,
        b_12_q0 => B_12_q0,
        b_12_address1 => grp_mmult_hw_float_32_s_fu_74_b_12_address1,
        b_12_ce1 => grp_mmult_hw_float_32_s_fu_74_b_12_ce1,
        b_12_q1 => B_12_q1,
        b_13_address0 => grp_mmult_hw_float_32_s_fu_74_b_13_address0,
        b_13_ce0 => grp_mmult_hw_float_32_s_fu_74_b_13_ce0,
        b_13_q0 => B_13_q0,
        b_13_address1 => grp_mmult_hw_float_32_s_fu_74_b_13_address1,
        b_13_ce1 => grp_mmult_hw_float_32_s_fu_74_b_13_ce1,
        b_13_q1 => B_13_q1,
        b_14_address0 => grp_mmult_hw_float_32_s_fu_74_b_14_address0,
        b_14_ce0 => grp_mmult_hw_float_32_s_fu_74_b_14_ce0,
        b_14_q0 => B_14_q0,
        b_14_address1 => grp_mmult_hw_float_32_s_fu_74_b_14_address1,
        b_14_ce1 => grp_mmult_hw_float_32_s_fu_74_b_14_ce1,
        b_14_q1 => B_14_q1,
        b_15_address0 => grp_mmult_hw_float_32_s_fu_74_b_15_address0,
        b_15_ce0 => grp_mmult_hw_float_32_s_fu_74_b_15_ce0,
        b_15_q0 => B_15_q0,
        b_15_address1 => grp_mmult_hw_float_32_s_fu_74_b_15_address1,
        b_15_ce1 => grp_mmult_hw_float_32_s_fu_74_b_15_ce1,
        b_15_q1 => B_15_q1,
        out_r_address0 => grp_mmult_hw_float_32_s_fu_74_out_r_address0,
        out_r_ce0 => grp_mmult_hw_float_32_s_fu_74_out_r_ce0,
        out_r_we0 => grp_mmult_hw_float_32_s_fu_74_out_r_we0,
        out_r_d0 => grp_mmult_hw_float_32_s_fu_74_out_r_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_mmult_hw_float_32_s_fu_74_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_mmult_hw_float_32_s_fu_74_ap_start <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_reg_grp_mmult_hw_float_32_s_fu_74_ap_start <= ap_const_logic_1;
                elsif ((grp_mmult_hw_float_32_s_fu_74_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_mmult_hw_float_32_s_fu_74_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_mmult_hw_float_32_s_fu_74_ap_done, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_mmult_hw_float_32_s_fu_74_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    A_0_address0 <= grp_mmult_hw_float_32_s_fu_74_a_0_address0;
    A_0_address1 <= grp_mmult_hw_float_32_s_fu_74_a_0_address1;
    A_0_ce0 <= grp_mmult_hw_float_32_s_fu_74_a_0_ce0;
    A_0_ce1 <= grp_mmult_hw_float_32_s_fu_74_a_0_ce1;
    A_10_address0 <= grp_mmult_hw_float_32_s_fu_74_a_10_address0;
    A_10_address1 <= grp_mmult_hw_float_32_s_fu_74_a_10_address1;
    A_10_ce0 <= grp_mmult_hw_float_32_s_fu_74_a_10_ce0;
    A_10_ce1 <= grp_mmult_hw_float_32_s_fu_74_a_10_ce1;
    A_11_address0 <= grp_mmult_hw_float_32_s_fu_74_a_11_address0;
    A_11_address1 <= grp_mmult_hw_float_32_s_fu_74_a_11_address1;
    A_11_ce0 <= grp_mmult_hw_float_32_s_fu_74_a_11_ce0;
    A_11_ce1 <= grp_mmult_hw_float_32_s_fu_74_a_11_ce1;
    A_12_address0 <= grp_mmult_hw_float_32_s_fu_74_a_12_address0;
    A_12_address1 <= grp_mmult_hw_float_32_s_fu_74_a_12_address1;
    A_12_ce0 <= grp_mmult_hw_float_32_s_fu_74_a_12_ce0;
    A_12_ce1 <= grp_mmult_hw_float_32_s_fu_74_a_12_ce1;
    A_13_address0 <= grp_mmult_hw_float_32_s_fu_74_a_13_address0;
    A_13_address1 <= grp_mmult_hw_float_32_s_fu_74_a_13_address1;
    A_13_ce0 <= grp_mmult_hw_float_32_s_fu_74_a_13_ce0;
    A_13_ce1 <= grp_mmult_hw_float_32_s_fu_74_a_13_ce1;
    A_14_address0 <= grp_mmult_hw_float_32_s_fu_74_a_14_address0;
    A_14_address1 <= grp_mmult_hw_float_32_s_fu_74_a_14_address1;
    A_14_ce0 <= grp_mmult_hw_float_32_s_fu_74_a_14_ce0;
    A_14_ce1 <= grp_mmult_hw_float_32_s_fu_74_a_14_ce1;
    A_15_address0 <= grp_mmult_hw_float_32_s_fu_74_a_15_address0;
    A_15_address1 <= grp_mmult_hw_float_32_s_fu_74_a_15_address1;
    A_15_ce0 <= grp_mmult_hw_float_32_s_fu_74_a_15_ce0;
    A_15_ce1 <= grp_mmult_hw_float_32_s_fu_74_a_15_ce1;
    A_1_address0 <= grp_mmult_hw_float_32_s_fu_74_a_1_address0;
    A_1_address1 <= grp_mmult_hw_float_32_s_fu_74_a_1_address1;
    A_1_ce0 <= grp_mmult_hw_float_32_s_fu_74_a_1_ce0;
    A_1_ce1 <= grp_mmult_hw_float_32_s_fu_74_a_1_ce1;
    A_2_address0 <= grp_mmult_hw_float_32_s_fu_74_a_2_address0;
    A_2_address1 <= grp_mmult_hw_float_32_s_fu_74_a_2_address1;
    A_2_ce0 <= grp_mmult_hw_float_32_s_fu_74_a_2_ce0;
    A_2_ce1 <= grp_mmult_hw_float_32_s_fu_74_a_2_ce1;
    A_3_address0 <= grp_mmult_hw_float_32_s_fu_74_a_3_address0;
    A_3_address1 <= grp_mmult_hw_float_32_s_fu_74_a_3_address1;
    A_3_ce0 <= grp_mmult_hw_float_32_s_fu_74_a_3_ce0;
    A_3_ce1 <= grp_mmult_hw_float_32_s_fu_74_a_3_ce1;
    A_4_address0 <= grp_mmult_hw_float_32_s_fu_74_a_4_address0;
    A_4_address1 <= grp_mmult_hw_float_32_s_fu_74_a_4_address1;
    A_4_ce0 <= grp_mmult_hw_float_32_s_fu_74_a_4_ce0;
    A_4_ce1 <= grp_mmult_hw_float_32_s_fu_74_a_4_ce1;
    A_5_address0 <= grp_mmult_hw_float_32_s_fu_74_a_5_address0;
    A_5_address1 <= grp_mmult_hw_float_32_s_fu_74_a_5_address1;
    A_5_ce0 <= grp_mmult_hw_float_32_s_fu_74_a_5_ce0;
    A_5_ce1 <= grp_mmult_hw_float_32_s_fu_74_a_5_ce1;
    A_6_address0 <= grp_mmult_hw_float_32_s_fu_74_a_6_address0;
    A_6_address1 <= grp_mmult_hw_float_32_s_fu_74_a_6_address1;
    A_6_ce0 <= grp_mmult_hw_float_32_s_fu_74_a_6_ce0;
    A_6_ce1 <= grp_mmult_hw_float_32_s_fu_74_a_6_ce1;
    A_7_address0 <= grp_mmult_hw_float_32_s_fu_74_a_7_address0;
    A_7_address1 <= grp_mmult_hw_float_32_s_fu_74_a_7_address1;
    A_7_ce0 <= grp_mmult_hw_float_32_s_fu_74_a_7_ce0;
    A_7_ce1 <= grp_mmult_hw_float_32_s_fu_74_a_7_ce1;
    A_8_address0 <= grp_mmult_hw_float_32_s_fu_74_a_8_address0;
    A_8_address1 <= grp_mmult_hw_float_32_s_fu_74_a_8_address1;
    A_8_ce0 <= grp_mmult_hw_float_32_s_fu_74_a_8_ce0;
    A_8_ce1 <= grp_mmult_hw_float_32_s_fu_74_a_8_ce1;
    A_9_address0 <= grp_mmult_hw_float_32_s_fu_74_a_9_address0;
    A_9_address1 <= grp_mmult_hw_float_32_s_fu_74_a_9_address1;
    A_9_ce0 <= grp_mmult_hw_float_32_s_fu_74_a_9_ce0;
    A_9_ce1 <= grp_mmult_hw_float_32_s_fu_74_a_9_ce1;
    B_0_address0 <= grp_mmult_hw_float_32_s_fu_74_b_0_address0;
    B_0_address1 <= grp_mmult_hw_float_32_s_fu_74_b_0_address1;
    B_0_ce0 <= grp_mmult_hw_float_32_s_fu_74_b_0_ce0;
    B_0_ce1 <= grp_mmult_hw_float_32_s_fu_74_b_0_ce1;
    B_10_address0 <= grp_mmult_hw_float_32_s_fu_74_b_10_address0;
    B_10_address1 <= grp_mmult_hw_float_32_s_fu_74_b_10_address1;
    B_10_ce0 <= grp_mmult_hw_float_32_s_fu_74_b_10_ce0;
    B_10_ce1 <= grp_mmult_hw_float_32_s_fu_74_b_10_ce1;
    B_11_address0 <= grp_mmult_hw_float_32_s_fu_74_b_11_address0;
    B_11_address1 <= grp_mmult_hw_float_32_s_fu_74_b_11_address1;
    B_11_ce0 <= grp_mmult_hw_float_32_s_fu_74_b_11_ce0;
    B_11_ce1 <= grp_mmult_hw_float_32_s_fu_74_b_11_ce1;
    B_12_address0 <= grp_mmult_hw_float_32_s_fu_74_b_12_address0;
    B_12_address1 <= grp_mmult_hw_float_32_s_fu_74_b_12_address1;
    B_12_ce0 <= grp_mmult_hw_float_32_s_fu_74_b_12_ce0;
    B_12_ce1 <= grp_mmult_hw_float_32_s_fu_74_b_12_ce1;
    B_13_address0 <= grp_mmult_hw_float_32_s_fu_74_b_13_address0;
    B_13_address1 <= grp_mmult_hw_float_32_s_fu_74_b_13_address1;
    B_13_ce0 <= grp_mmult_hw_float_32_s_fu_74_b_13_ce0;
    B_13_ce1 <= grp_mmult_hw_float_32_s_fu_74_b_13_ce1;
    B_14_address0 <= grp_mmult_hw_float_32_s_fu_74_b_14_address0;
    B_14_address1 <= grp_mmult_hw_float_32_s_fu_74_b_14_address1;
    B_14_ce0 <= grp_mmult_hw_float_32_s_fu_74_b_14_ce0;
    B_14_ce1 <= grp_mmult_hw_float_32_s_fu_74_b_14_ce1;
    B_15_address0 <= grp_mmult_hw_float_32_s_fu_74_b_15_address0;
    B_15_address1 <= grp_mmult_hw_float_32_s_fu_74_b_15_address1;
    B_15_ce0 <= grp_mmult_hw_float_32_s_fu_74_b_15_ce0;
    B_15_ce1 <= grp_mmult_hw_float_32_s_fu_74_b_15_ce1;
    B_1_address0 <= grp_mmult_hw_float_32_s_fu_74_b_1_address0;
    B_1_address1 <= grp_mmult_hw_float_32_s_fu_74_b_1_address1;
    B_1_ce0 <= grp_mmult_hw_float_32_s_fu_74_b_1_ce0;
    B_1_ce1 <= grp_mmult_hw_float_32_s_fu_74_b_1_ce1;
    B_2_address0 <= grp_mmult_hw_float_32_s_fu_74_b_2_address0;
    B_2_address1 <= grp_mmult_hw_float_32_s_fu_74_b_2_address1;
    B_2_ce0 <= grp_mmult_hw_float_32_s_fu_74_b_2_ce0;
    B_2_ce1 <= grp_mmult_hw_float_32_s_fu_74_b_2_ce1;
    B_3_address0 <= grp_mmult_hw_float_32_s_fu_74_b_3_address0;
    B_3_address1 <= grp_mmult_hw_float_32_s_fu_74_b_3_address1;
    B_3_ce0 <= grp_mmult_hw_float_32_s_fu_74_b_3_ce0;
    B_3_ce1 <= grp_mmult_hw_float_32_s_fu_74_b_3_ce1;
    B_4_address0 <= grp_mmult_hw_float_32_s_fu_74_b_4_address0;
    B_4_address1 <= grp_mmult_hw_float_32_s_fu_74_b_4_address1;
    B_4_ce0 <= grp_mmult_hw_float_32_s_fu_74_b_4_ce0;
    B_4_ce1 <= grp_mmult_hw_float_32_s_fu_74_b_4_ce1;
    B_5_address0 <= grp_mmult_hw_float_32_s_fu_74_b_5_address0;
    B_5_address1 <= grp_mmult_hw_float_32_s_fu_74_b_5_address1;
    B_5_ce0 <= grp_mmult_hw_float_32_s_fu_74_b_5_ce0;
    B_5_ce1 <= grp_mmult_hw_float_32_s_fu_74_b_5_ce1;
    B_6_address0 <= grp_mmult_hw_float_32_s_fu_74_b_6_address0;
    B_6_address1 <= grp_mmult_hw_float_32_s_fu_74_b_6_address1;
    B_6_ce0 <= grp_mmult_hw_float_32_s_fu_74_b_6_ce0;
    B_6_ce1 <= grp_mmult_hw_float_32_s_fu_74_b_6_ce1;
    B_7_address0 <= grp_mmult_hw_float_32_s_fu_74_b_7_address0;
    B_7_address1 <= grp_mmult_hw_float_32_s_fu_74_b_7_address1;
    B_7_ce0 <= grp_mmult_hw_float_32_s_fu_74_b_7_ce0;
    B_7_ce1 <= grp_mmult_hw_float_32_s_fu_74_b_7_ce1;
    B_8_address0 <= grp_mmult_hw_float_32_s_fu_74_b_8_address0;
    B_8_address1 <= grp_mmult_hw_float_32_s_fu_74_b_8_address1;
    B_8_ce0 <= grp_mmult_hw_float_32_s_fu_74_b_8_ce0;
    B_8_ce1 <= grp_mmult_hw_float_32_s_fu_74_b_8_ce1;
    B_9_address0 <= grp_mmult_hw_float_32_s_fu_74_b_9_address0;
    B_9_address1 <= grp_mmult_hw_float_32_s_fu_74_b_9_address1;
    B_9_ce0 <= grp_mmult_hw_float_32_s_fu_74_b_9_ce0;
    B_9_ce1 <= grp_mmult_hw_float_32_s_fu_74_b_9_ce1;
    C_address0 <= grp_mmult_hw_float_32_s_fu_74_out_r_address0;
    C_ce0 <= grp_mmult_hw_float_32_s_fu_74_out_r_ce0;
    C_d0 <= grp_mmult_hw_float_32_s_fu_74_out_r_d0;
    C_we0 <= grp_mmult_hw_float_32_s_fu_74_out_r_we0;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(grp_mmult_hw_float_32_s_fu_74_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_mmult_hw_float_32_s_fu_74_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_mmult_hw_float_32_s_fu_74_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_mmult_hw_float_32_s_fu_74_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_mmult_hw_float_32_s_fu_74_ap_start <= ap_reg_grp_mmult_hw_float_32_s_fu_74_ap_start;
end behav;
