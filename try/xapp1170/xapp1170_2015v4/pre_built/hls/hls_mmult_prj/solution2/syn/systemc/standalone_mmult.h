// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _standalone_mmult_HH_
#define _standalone_mmult_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "mmult_hw_float_32_s.h"

namespace ap_rtl {

struct standalone_mmult : public sc_module {
    // Port declarations 22
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<10> > A_address0;
    sc_out< sc_logic > A_ce0;
    sc_in< sc_lv<32> > A_q0;
    sc_out< sc_lv<10> > A_address1;
    sc_out< sc_logic > A_ce1;
    sc_in< sc_lv<32> > A_q1;
    sc_out< sc_lv<10> > B_address0;
    sc_out< sc_logic > B_ce0;
    sc_in< sc_lv<32> > B_q0;
    sc_out< sc_lv<10> > B_address1;
    sc_out< sc_logic > B_ce1;
    sc_in< sc_lv<32> > B_q1;
    sc_out< sc_lv<10> > C_address0;
    sc_out< sc_logic > C_ce0;
    sc_out< sc_logic > C_we0;
    sc_out< sc_lv<32> > C_d0;


    // Module declarations
    standalone_mmult(sc_module_name name);
    SC_HAS_PROCESS(standalone_mmult);

    ~standalone_mmult();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    mmult_hw_float_32_s* grp_mmult_hw_float_32_s_fu_14;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > grp_mmult_hw_float_32_s_fu_14_ap_start;
    sc_signal< sc_logic > grp_mmult_hw_float_32_s_fu_14_ap_done;
    sc_signal< sc_logic > grp_mmult_hw_float_32_s_fu_14_ap_idle;
    sc_signal< sc_logic > grp_mmult_hw_float_32_s_fu_14_ap_ready;
    sc_signal< sc_lv<10> > grp_mmult_hw_float_32_s_fu_14_a_address0;
    sc_signal< sc_logic > grp_mmult_hw_float_32_s_fu_14_a_ce0;
    sc_signal< sc_lv<10> > grp_mmult_hw_float_32_s_fu_14_a_address1;
    sc_signal< sc_logic > grp_mmult_hw_float_32_s_fu_14_a_ce1;
    sc_signal< sc_lv<10> > grp_mmult_hw_float_32_s_fu_14_b_address0;
    sc_signal< sc_logic > grp_mmult_hw_float_32_s_fu_14_b_ce0;
    sc_signal< sc_lv<10> > grp_mmult_hw_float_32_s_fu_14_b_address1;
    sc_signal< sc_logic > grp_mmult_hw_float_32_s_fu_14_b_ce1;
    sc_signal< sc_lv<10> > grp_mmult_hw_float_32_s_fu_14_out_r_address0;
    sc_signal< sc_logic > grp_mmult_hw_float_32_s_fu_14_out_r_ce0;
    sc_signal< sc_logic > grp_mmult_hw_float_32_s_fu_14_out_r_we0;
    sc_signal< sc_lv<32> > grp_mmult_hw_float_32_s_fu_14_out_r_d0;
    sc_signal< sc_logic > ap_reg_grp_mmult_hw_float_32_s_fu_14_ap_start;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_A_address0();
    void thread_A_address1();
    void thread_A_ce0();
    void thread_A_ce1();
    void thread_B_address0();
    void thread_B_address1();
    void thread_B_ce0();
    void thread_B_ce1();
    void thread_C_address0();
    void thread_C_ce0();
    void thread_C_d0();
    void thread_C_we0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_grp_mmult_hw_float_32_s_fu_14_ap_start();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
